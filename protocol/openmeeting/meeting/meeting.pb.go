// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: meeting.proto

package meeting

import (
	wrapperspb "github.com/eos/protocol/wrapperspb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DayOfWeek int32

const (
	DayOfWeek_SUNDAY    DayOfWeek = 0
	DayOfWeek_MONDAY    DayOfWeek = 1
	DayOfWeek_TUESDAY   DayOfWeek = 2
	DayOfWeek_WEDNESDAY DayOfWeek = 3
	DayOfWeek_THURSDAY  DayOfWeek = 4
	DayOfWeek_FRIDAY    DayOfWeek = 5
	DayOfWeek_SATURDAY  DayOfWeek = 6
)

// Enum value maps for DayOfWeek.
var (
	DayOfWeek_name = map[int32]string{
		0: "SUNDAY",
		1: "MONDAY",
		2: "TUESDAY",
		3: "WEDNESDAY",
		4: "THURSDAY",
		5: "FRIDAY",
		6: "SATURDAY",
	}
	DayOfWeek_value = map[string]int32{
		"SUNDAY":    0,
		"MONDAY":    1,
		"TUESDAY":   2,
		"WEDNESDAY": 3,
		"THURSDAY":  4,
		"FRIDAY":    5,
		"SATURDAY":  6,
	}
)

func (x DayOfWeek) Enum() *DayOfWeek {
	p := new(DayOfWeek)
	*p = x
	return p
}

func (x DayOfWeek) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DayOfWeek) Descriptor() protoreflect.EnumDescriptor {
	return file_meeting_proto_enumTypes[0].Descriptor()
}

func (DayOfWeek) Type() protoreflect.EnumType {
	return &file_meeting_proto_enumTypes[0]
}

func (x DayOfWeek) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DayOfWeek.Descriptor instead.
func (DayOfWeek) EnumDescriptor() ([]byte, []int) {
	return file_meeting_proto_rawDescGZIP(), []int{0}
}

type KickOffReason int32

const (
	KickOffReason_DuplicatedLogin KickOffReason = 0
	KickOffReason_Offline         KickOffReason = 1
	KickOffReason_Logout          KickOffReason = 2
)

// Enum value maps for KickOffReason.
var (
	KickOffReason_name = map[int32]string{
		0: "DuplicatedLogin",
		1: "Offline",
		2: "Logout",
	}
	KickOffReason_value = map[string]int32{
		"DuplicatedLogin": 0,
		"Offline":         1,
		"Logout":          2,
	}
)

func (x KickOffReason) Enum() *KickOffReason {
	p := new(KickOffReason)
	*p = x
	return p
}

func (x KickOffReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KickOffReason) Descriptor() protoreflect.EnumDescriptor {
	return file_meeting_proto_enumTypes[1].Descriptor()
}

func (KickOffReason) Type() protoreflect.EnumType {
	return &file_meeting_proto_enumTypes[1]
}

func (x KickOffReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KickOffReason.Descriptor instead.
func (KickOffReason) EnumDescriptor() ([]byte, []int) {
	return file_meeting_proto_rawDescGZIP(), []int{1}
}

type MeetingEndType int32

const (
	MeetingEndType_CancelType MeetingEndType = 0
	MeetingEndType_EndType    MeetingEndType = 1
)

// Enum value maps for MeetingEndType.
var (
	MeetingEndType_name = map[int32]string{
		0: "CancelType",
		1: "EndType",
	}
	MeetingEndType_value = map[string]int32{
		"CancelType": 0,
		"EndType":    1,
	}
)

func (x MeetingEndType) Enum() *MeetingEndType {
	p := new(MeetingEndType)
	*p = x
	return p
}

func (x MeetingEndType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MeetingEndType) Descriptor() protoreflect.EnumDescriptor {
	return file_meeting_proto_enumTypes[2].Descriptor()
}

func (MeetingEndType) Type() protoreflect.EnumType {
	return &file_meeting_proto_enumTypes[2]
}

func (x MeetingEndType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MeetingEndType.Descriptor instead.
func (MeetingEndType) EnumDescriptor() ([]byte, []int) {
	return file_meeting_proto_rawDescGZIP(), []int{2}
}

// Defines LiveKit access information.
type LiveKit struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Token         string                 `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"` // Access token for authentication.
	Url           string                 `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`     // URL to connect to LiveKit.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LiveKit) Reset() {
	*x = LiveKit{}
	mi := &file_meeting_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LiveKit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveKit) ProtoMessage() {}

func (x *LiveKit) ProtoReflect() protoreflect.Message {
	mi := &file_meeting_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveKit.ProtoReflect.Descriptor instead.
func (*LiveKit) Descriptor() ([]byte, []int) {
	return file_meeting_proto_rawDescGZIP(), []int{0}
}

func (x *LiveKit) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *LiveKit) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

// Information about a specific meeting that cannot be changed once set.
type SystemGeneratedMeetingInfo struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	CreatorUserID   string                 `protobuf:"bytes,1,opt,name=creatorUserID,proto3" json:"creatorUserID,omitempty"`     // The user ID of the meeting creator.
	CreatorNickname string                 `protobuf:"bytes,2,opt,name=creatorNickname,proto3" json:"creatorNickname,omitempty"` // The user name of the meeting creator.
	Status          string                 `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`                   // The current status of the meeting, e.g., scheduled, in-progress, completed.
	StartTime       int64                  `protobuf:"varint,4,opt,name=startTime,proto3" json:"startTime,omitempty"`            // The actual start time of the meeting (as a timestamp).
	MeetingID       string                 `protobuf:"bytes,5,opt,name=meetingID,proto3" json:"meetingID,omitempty"`             // Unique identifier for the meeting.
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *SystemGeneratedMeetingInfo) Reset() {
	*x = SystemGeneratedMeetingInfo{}
	mi := &file_meeting_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SystemGeneratedMeetingInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemGeneratedMeetingInfo) ProtoMessage() {}

func (x *SystemGeneratedMeetingInfo) ProtoReflect() protoreflect.Message {
	mi := &file_meeting_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemGeneratedMeetingInfo.ProtoReflect.Descriptor instead.
func (*SystemGeneratedMeetingInfo) Descriptor() ([]byte, []int) {
	return file_meeting_proto_rawDescGZIP(), []int{1}
}

func (x *SystemGeneratedMeetingInfo) GetCreatorUserID() string {
	if x != nil {
		return x.CreatorUserID
	}
	return ""
}

func (x *SystemGeneratedMeetingInfo) GetCreatorNickname() string {
	if x != nil {
		return x.CreatorNickname
	}
	return ""
}

func (x *SystemGeneratedMeetingInfo) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *SystemGeneratedMeetingInfo) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *SystemGeneratedMeetingInfo) GetMeetingID() string {
	if x != nil {
		return x.MeetingID
	}
	return ""
}

// Information about a specific meeting that can be modified.
type CreatorDefinedMeetingInfo struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Title           string                 `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`                      // The title of the meeting.
	ScheduledTime   int64                  `protobuf:"varint,2,opt,name=scheduledTime,proto3" json:"scheduledTime,omitempty"`     // The scheduled start time of the meeting (as a timestamp).
	MeetingDuration int64                  `protobuf:"varint,3,opt,name=meetingDuration,proto3" json:"meetingDuration,omitempty"` // The duration of the meeting in seconds.
	Password        string                 `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`                // Password required to join the meeting, if any.
	TimeZone        string                 `protobuf:"bytes,5,opt,name=timeZone,proto3" json:"timeZone,omitempty"`                // creator specify time zone.
	HostUserID      string                 `protobuf:"bytes,6,opt,name=hostUserID,proto3" json:"hostUserID,omitempty"`
	CoHostUSerID    []string               `protobuf:"bytes,7,rep,name=coHostUSerID,proto3" json:"coHostUSerID,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CreatorDefinedMeetingInfo) Reset() {
	*x = CreatorDefinedMeetingInfo{}
	mi := &file_meeting_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreatorDefinedMeetingInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatorDefinedMeetingInfo) ProtoMessage() {}

func (x *CreatorDefinedMeetingInfo) ProtoReflect() protoreflect.Message {
	mi := &file_meeting_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatorDefinedMeetingInfo.ProtoReflect.Descriptor instead.
func (*CreatorDefinedMeetingInfo) Descriptor() ([]byte, []int) {
	return file_meeting_proto_rawDescGZIP(), []int{2}
}

func (x *CreatorDefinedMeetingInfo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CreatorDefinedMeetingInfo) GetScheduledTime() int64 {
	if x != nil {
		return x.ScheduledTime
	}
	return 0
}

func (x *CreatorDefinedMeetingInfo) GetMeetingDuration() int64 {
	if x != nil {
		return x.MeetingDuration
	}
	return 0
}

func (x *CreatorDefinedMeetingInfo) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *CreatorDefinedMeetingInfo) GetTimeZone() string {
	if x != nil {
		return x.TimeZone
	}
	return ""
}

func (x *CreatorDefinedMeetingInfo) GetHostUserID() string {
	if x != nil {
		return x.HostUserID
	}
	return ""
}

func (x *CreatorDefinedMeetingInfo) GetCoHostUSerID() []string {
	if x != nil {
		return x.CoHostUSerID
	}
	return nil
}

// Information about a specific meeting, combining system-generated and creator-defined information.
type MeetingInfo struct {
	state                 protoimpl.MessageState      `protogen:"open.v1"`
	SystemGenerated       *SystemGeneratedMeetingInfo `protobuf:"bytes,1,opt,name=systemGenerated,proto3" json:"systemGenerated,omitempty"`
	CreatorDefinedMeeting *CreatorDefinedMeetingInfo  `protobuf:"bytes,2,opt,name=creatorDefinedMeeting,proto3" json:"creatorDefinedMeeting,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *MeetingInfo) Reset() {
	*x = MeetingInfo{}
	mi := &file_meeting_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MeetingInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeetingInfo) ProtoMessage() {}

func (x *MeetingInfo) ProtoReflect() protoreflect.Message {
	mi := &file_meeting_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeetingInfo.ProtoReflect.Descriptor instead.
func (*MeetingInfo) Descriptor() ([]byte, []int) {
	return file_meeting_proto_rawDescGZIP(), []int{3}
}

func (x *MeetingInfo) GetSystemGenerated() *SystemGeneratedMeetingInfo {
	if x != nil {
		return x.SystemGenerated
	}
	return nil
}

func (x *MeetingInfo) GetCreatorDefinedMeeting() *CreatorDefinedMeetingInfo {
	if x != nil {
		return x.CreatorDefinedMeeting
	}
	return nil
}

type MeetingRepeatInfo struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	EndDate          int64                  `protobuf:"varint,1,opt,name=endDate,proto3" json:"endDate,omitempty"`
	RepeatTimes      int32                  `protobuf:"varint,2,opt,name=repeatTimes,proto3" json:"repeatTimes,omitempty"`
	RepeatType       string                 `protobuf:"bytes,3,opt,name=repeatType,proto3" json:"repeatType,omitempty"`
	UintType         string                 `protobuf:"bytes,4,opt,name=uintType,proto3" json:"uintType,omitempty"`
	Interval         int32                  `protobuf:"varint,5,opt,name=interval,proto3" json:"interval,omitempty"`
	RepeatDaysOfWeek []DayOfWeek            `protobuf:"varint,6,rep,packed,name=repeatDaysOfWeek,proto3,enum=openmeeting.meeting.DayOfWeek" json:"repeatDaysOfWeek,omitempty"` // repeat days of the week
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *MeetingRepeatInfo) Reset() {
	*x = MeetingRepeatInfo{}
	mi := &file_meeting_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MeetingRepeatInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeetingRepeatInfo) ProtoMessage() {}

func (x *MeetingRepeatInfo) ProtoReflect() protoreflect.Message {
	mi := &file_meeting_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeetingRepeatInfo.ProtoReflect.Descriptor instead.
func (*MeetingRepeatInfo) Descriptor() ([]byte, []int) {
	return file_meeting_proto_rawDescGZIP(), []int{4}
}

func (x *MeetingRepeatInfo) GetEndDate() int64 {
	if x != nil {
		return x.EndDate
	}
	return 0
}

func (x *MeetingRepeatInfo) GetRepeatTimes() int32 {
	if x != nil {
		return x.RepeatTimes
	}
	return 0
}

func (x *MeetingRepeatInfo) GetRepeatType() string {
	if x != nil {
		return x.RepeatType
	}
	return ""
}

func (x *MeetingRepeatInfo) GetUintType() string {
	if x != nil {
		return x.UintType
	}
	return ""
}

func (x *MeetingRepeatInfo) GetInterval() int32 {
	if x != nil {
		return x.Interval
	}
	return 0
}

func (x *MeetingRepeatInfo) GetRepeatDaysOfWeek() []DayOfWeek {
	if x != nil {
		return x.RepeatDaysOfWeek
	}
	return nil
}

// Settings controlling meeting features such as video, audio, and screen sharing permissions.
type MeetingSetting struct {
	state                           protoimpl.MessageState `protogen:"open.v1"`
	CanParticipantsEnableCamera     bool                   `protobuf:"varint,1,opt,name=canParticipantsEnableCamera,proto3" json:"canParticipantsEnableCamera,omitempty"`         // Whether participants can enable their video camera.
	CanParticipantsUnmuteMicrophone bool                   `protobuf:"varint,2,opt,name=canParticipantsUnmuteMicrophone,proto3" json:"canParticipantsUnmuteMicrophone,omitempty"` // Whether participants can unmute their microphone.
	CanParticipantsShareScreen      bool                   `protobuf:"varint,3,opt,name=canParticipantsShareScreen,proto3" json:"canParticipantsShareScreen,omitempty"`           // Whether participants can share their screen.
	DisableCameraOnJoin             bool                   `protobuf:"varint,4,opt,name=disableCameraOnJoin,proto3" json:"disableCameraOnJoin,omitempty"`                         // Whether the camera is disabled by default when joining.
	DisableMicrophoneOnJoin         bool                   `protobuf:"varint,5,opt,name=disableMicrophoneOnJoin,proto3" json:"disableMicrophoneOnJoin,omitempty"`                 // Whether the microphone is disabled by default when joining.
	CanParticipantJoinMeetingEarly  bool                   `protobuf:"varint,6,opt,name=canParticipantJoinMeetingEarly,proto3" json:"canParticipantJoinMeetingEarly,omitempty"`   // Allow participants to join the meeting early.
	LockMeeting                     bool                   `protobuf:"varint,7,opt,name=lockMeeting,proto3" json:"lockMeeting,omitempty"`                                         // if the meeting is locked, new comer could not join the meeting.
	AudioEncouragement              bool                   `protobuf:"varint,8,opt,name=audioEncouragement,proto3" json:"audioEncouragement,omitempty"`                           // could turn on the audio encouragement for client.
	VideoMirroring                  bool                   `protobuf:"varint,9,opt,name=videoMirroring,proto3" json:"videoMirroring,omitempty"`                                   // could turn on the video mirroring for client.
	unknownFields                   protoimpl.UnknownFields
	sizeCache                       protoimpl.SizeCache
}

func (x *MeetingSetting) Reset() {
	*x = MeetingSetting{}
	mi := &file_meeting_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MeetingSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeetingSetting) ProtoMessage() {}

func (x *MeetingSetting) ProtoReflect() protoreflect.Message {
	mi := &file_meeting_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeetingSetting.ProtoReflect.Descriptor instead.
func (*MeetingSetting) Descriptor() ([]byte, []int) {
	return file_meeting_proto_rawDescGZIP(), []int{5}
}

func (x *MeetingSetting) GetCanParticipantsEnableCamera() bool {
	if x != nil {
		return x.CanParticipantsEnableCamera
	}
	return false
}

func (x *MeetingSetting) GetCanParticipantsUnmuteMicrophone() bool {
	if x != nil {
		return x.CanParticipantsUnmuteMicrophone
	}
	return false
}

func (x *MeetingSetting) GetCanParticipantsShareScreen() bool {
	if x != nil {
		return x.CanParticipantsShareScreen
	}
	return false
}

func (x *MeetingSetting) GetDisableCameraOnJoin() bool {
	if x != nil {
		return x.DisableCameraOnJoin
	}
	return false
}

func (x *MeetingSetting) GetDisableMicrophoneOnJoin() bool {
	if x != nil {
		return x.DisableMicrophoneOnJoin
	}
	return false
}

func (x *MeetingSetting) GetCanParticipantJoinMeetingEarly() bool {
	if x != nil {
		return x.CanParticipantJoinMeetingEarly
	}
	return false
}

func (x *MeetingSetting) GetLockMeeting() bool {
	if x != nil {
		return x.LockMeeting
	}
	return false
}

func (x *MeetingSetting) GetAudioEncouragement() bool {
	if x != nil {
		return x.AudioEncouragement
	}
	return false
}

func (x *MeetingSetting) GetVideoMirroring() bool {
	if x != nil {
		return x.VideoMirroring
	}
	return false
}

// Detailed information about a meeting, combining info and settings.
type MeetingInfoSetting struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Info          *MeetingInfo           `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
	Setting       *MeetingSetting        `protobuf:"bytes,2,opt,name=setting,proto3" json:"setting,omitempty"`
	RepeatInfo    *MeetingRepeatInfo     `protobuf:"bytes,3,opt,name=repeatInfo,proto3" json:"repeatInfo,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MeetingInfoSetting) Reset() {
	*x = MeetingInfoSetting{}
	mi := &file_meeting_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MeetingInfoSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeetingInfoSetting) ProtoMessage() {}

func (x *MeetingInfoSetting) ProtoReflect() protoreflect.Message {
	mi := &file_meeting_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeetingInfoSetting.ProtoReflect.Descriptor instead.
func (*MeetingInfoSetting) Descriptor() ([]byte, []int) {
	return file_meeting_proto_rawDescGZIP(), []int{6}
}

func (x *MeetingInfoSetting) GetInfo() *MeetingInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *MeetingInfoSetting) GetSetting() *MeetingSetting {
	if x != nil {
		return x.Setting
	}
	return nil
}

func (x *MeetingInfoSetting) GetRepeatInfo() *MeetingRepeatInfo {
	if x != nil {
		return x.RepeatInfo
	}
	return nil
}

type UserInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserID        string                 `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"`
	Nickname      string                 `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Account       string                 `protobuf:"bytes,3,opt,name=account,proto3" json:"account,omitempty"`
	FaceURL       string                 `protobuf:"bytes,4,opt,name=faceURL,proto3" json:"faceURL,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserInfo) Reset() {
	*x = UserInfo{}
	mi := &file_meeting_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfo) ProtoMessage() {}

func (x *UserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_meeting_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfo.ProtoReflect.Descriptor instead.
func (*UserInfo) Descriptor() ([]byte, []int) {
	return file_meeting_proto_rawDescGZIP(), []int{7}
}

func (x *UserInfo) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *UserInfo) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *UserInfo) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *UserInfo) GetFaceURL() string {
	if x != nil {
		return x.FaceURL
	}
	return ""
}

// participant meta data
type ParticipantMetaData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserInfo      *UserInfo              `protobuf:"bytes,1,opt,name=userInfo,proto3" json:"userInfo,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ParticipantMetaData) Reset() {
	*x = ParticipantMetaData{}
	mi := &file_meeting_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParticipantMetaData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParticipantMetaData) ProtoMessage() {}

func (x *ParticipantMetaData) ProtoReflect() protoreflect.Message {
	mi := &file_meeting_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParticipantMetaData.ProtoReflect.Descriptor instead.
func (*ParticipantMetaData) Descriptor() ([]byte, []int) {
	return file_meeting_proto_rawDescGZIP(), []int{8}
}

func (x *ParticipantMetaData) GetUserInfo() *UserInfo {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

// Request to book a future meeting.
type BookMeetingReq struct {
	state                     protoimpl.MessageState     `protogen:"open.v1"`
	CreatorUserID             string                     `protobuf:"bytes,1,opt,name=creatorUserID,proto3" json:"creatorUserID,omitempty"`
	CreatorDefinedMeetingInfo *CreatorDefinedMeetingInfo `protobuf:"bytes,2,opt,name=creatorDefinedMeetingInfo,proto3" json:"creatorDefinedMeetingInfo,omitempty"`
	Setting                   *MeetingSetting            `protobuf:"bytes,3,opt,name=setting,proto3" json:"setting,omitempty"`
	RepeatInfo                *MeetingRepeatInfo         `protobuf:"bytes,4,opt,name=repeatInfo,proto3" json:"repeatInfo,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *BookMeetingReq) Reset() {
	*x = BookMeetingReq{}
	mi := &file_meeting_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BookMeetingReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BookMeetingReq) ProtoMessage() {}

func (x *BookMeetingReq) ProtoReflect() protoreflect.Message {
	mi := &file_meeting_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BookMeetingReq.ProtoReflect.Descriptor instead.
func (*BookMeetingReq) Descriptor() ([]byte, []int) {
	return file_meeting_proto_rawDescGZIP(), []int{9}
}

func (x *BookMeetingReq) GetCreatorUserID() string {
	if x != nil {
		return x.CreatorUserID
	}
	return ""
}

func (x *BookMeetingReq) GetCreatorDefinedMeetingInfo() *CreatorDefinedMeetingInfo {
	if x != nil {
		return x.CreatorDefinedMeetingInfo
	}
	return nil
}

func (x *BookMeetingReq) GetSetting() *MeetingSetting {
	if x != nil {
		return x.Setting
	}
	return nil
}

func (x *BookMeetingReq) GetRepeatInfo() *MeetingRepeatInfo {
	if x != nil {
		return x.RepeatInfo
	}
	return nil
}

// Response after booking a meeting.
type BookMeetingResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Detail        *MeetingInfoSetting    `protobuf:"bytes,1,opt,name=detail,proto3" json:"detail,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BookMeetingResp) Reset() {
	*x = BookMeetingResp{}
	mi := &file_meeting_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BookMeetingResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BookMeetingResp) ProtoMessage() {}

func (x *BookMeetingResp) ProtoReflect() protoreflect.Message {
	mi := &file_meeting_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BookMeetingResp.ProtoReflect.Descriptor instead.
func (*BookMeetingResp) Descriptor() ([]byte, []int) {
	return file_meeting_proto_rawDescGZIP(), []int{10}
}

func (x *BookMeetingResp) GetDetail() *MeetingInfoSetting {
	if x != nil {
		return x.Detail
	}
	return nil
}

// Request to create an immediate meeting.
type CreateImmediateMeetingReq struct {
	state                     protoimpl.MessageState     `protogen:"open.v1"`
	CreatorUserID             string                     `protobuf:"bytes,1,opt,name=creatorUserID,proto3" json:"creatorUserID,omitempty"`
	CreatorDefinedMeetingInfo *CreatorDefinedMeetingInfo `protobuf:"bytes,2,opt,name=creatorDefinedMeetingInfo,proto3" json:"creatorDefinedMeetingInfo,omitempty"`
	Setting                   *MeetingSetting            `protobuf:"bytes,3,opt,name=setting,proto3" json:"setting,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *CreateImmediateMeetingReq) Reset() {
	*x = CreateImmediateMeetingReq{}
	mi := &file_meeting_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateImmediateMeetingReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateImmediateMeetingReq) ProtoMessage() {}

func (x *CreateImmediateMeetingReq) ProtoReflect() protoreflect.Message {
	mi := &file_meeting_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateImmediateMeetingReq.ProtoReflect.Descriptor instead.
func (*CreateImmediateMeetingReq) Descriptor() ([]byte, []int) {
	return file_meeting_proto_rawDescGZIP(), []int{11}
}

func (x *CreateImmediateMeetingReq) GetCreatorUserID() string {
	if x != nil {
		return x.CreatorUserID
	}
	return ""
}

func (x *CreateImmediateMeetingReq) GetCreatorDefinedMeetingInfo() *CreatorDefinedMeetingInfo {
	if x != nil {
		return x.CreatorDefinedMeetingInfo
	}
	return nil
}

func (x *CreateImmediateMeetingReq) GetSetting() *MeetingSetting {
	if x != nil {
		return x.Setting
	}
	return nil
}

// Response after creating an immediate meeting.
type CreateImmediateMeetingResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Detail        *MeetingInfoSetting    `protobuf:"bytes,1,opt,name=detail,proto3" json:"detail,omitempty"`
	LiveKit       *LiveKit               `protobuf:"bytes,2,opt,name=liveKit,proto3" json:"liveKit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateImmediateMeetingResp) Reset() {
	*x = CreateImmediateMeetingResp{}
	mi := &file_meeting_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateImmediateMeetingResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateImmediateMeetingResp) ProtoMessage() {}

func (x *CreateImmediateMeetingResp) ProtoReflect() protoreflect.Message {
	mi := &file_meeting_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateImmediateMeetingResp.ProtoReflect.Descriptor instead.
func (*CreateImmediateMeetingResp) Descriptor() ([]byte, []int) {
	return file_meeting_proto_rawDescGZIP(), []int{12}
}

func (x *CreateImmediateMeetingResp) GetDetail() *MeetingInfoSetting {
	if x != nil {
		return x.Detail
	}
	return nil
}

func (x *CreateImmediateMeetingResp) GetLiveKit() *LiveKit {
	if x != nil {
		return x.LiveKit
	}
	return nil
}

// Request to join a meeting.
type JoinMeetingReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MeetingID     string                 `protobuf:"bytes,1,opt,name=meetingID,proto3" json:"meetingID,omitempty"`
	UserID        string                 `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID,omitempty"` // User who joins the meeting.
	Password      string                 `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JoinMeetingReq) Reset() {
	*x = JoinMeetingReq{}
	mi := &file_meeting_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JoinMeetingReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinMeetingReq) ProtoMessage() {}

func (x *JoinMeetingReq) ProtoReflect() protoreflect.Message {
	mi := &file_meeting_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinMeetingReq.ProtoReflect.Descriptor instead.
func (*JoinMeetingReq) Descriptor() ([]byte, []int) {
	return file_meeting_proto_rawDescGZIP(), []int{13}
}

func (x *JoinMeetingReq) GetMeetingID() string {
	if x != nil {
		return x.MeetingID
	}
	return ""
}

func (x *JoinMeetingReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *JoinMeetingReq) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

// Response after joining a meeting.
type JoinMeetingResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LiveKit       *LiveKit               `protobuf:"bytes,1,opt,name=liveKit,proto3" json:"liveKit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JoinMeetingResp) Reset() {
	*x = JoinMeetingResp{}
	mi := &file_meeting_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JoinMeetingResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinMeetingResp) ProtoMessage() {}

func (x *JoinMeetingResp) ProtoReflect() protoreflect.Message {
	mi := &file_meeting_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinMeetingResp.ProtoReflect.Descriptor instead.
func (*JoinMeetingResp) Descriptor() ([]byte, []int) {
	return file_meeting_proto_rawDescGZIP(), []int{14}
}

func (x *JoinMeetingResp) GetLiveKit() *LiveKit {
	if x != nil {
		return x.LiveKit
	}
	return nil
}

// Request to get a specific meeting token.
type GetMeetingTokenReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MeetingID     string                 `protobuf:"bytes,1,opt,name=meetingID,proto3" json:"meetingID,omitempty"`
	UserID        string                 `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID,omitempty"` // User who joins the meeting.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMeetingTokenReq) Reset() {
	*x = GetMeetingTokenReq{}
	mi := &file_meeting_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMeetingTokenReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMeetingTokenReq) ProtoMessage() {}

func (x *GetMeetingTokenReq) ProtoReflect() protoreflect.Message {
	mi := &file_meeting_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMeetingTokenReq.ProtoReflect.Descriptor instead.
func (*GetMeetingTokenReq) Descriptor() ([]byte, []int) {
	return file_meeting_proto_rawDescGZIP(), []int{15}
}

func (x *GetMeetingTokenReq) GetMeetingID() string {
	if x != nil {
		return x.MeetingID
	}
	return ""
}

func (x *GetMeetingTokenReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

// Response after getting a specific meeting.
type GetMeetingTokenResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MeetingID     string                 `protobuf:"bytes,1,opt,name=meetingID,proto3" json:"meetingID,omitempty"`
	LiveKit       *LiveKit               `protobuf:"bytes,2,opt,name=liveKit,proto3" json:"liveKit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMeetingTokenResp) Reset() {
	*x = GetMeetingTokenResp{}
	mi := &file_meeting_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMeetingTokenResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMeetingTokenResp) ProtoMessage() {}

func (x *GetMeetingTokenResp) ProtoReflect() protoreflect.Message {
	mi := &file_meeting_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMeetingTokenResp.ProtoReflect.Descriptor instead.
func (*GetMeetingTokenResp) Descriptor() ([]byte, []int) {
	return file_meeting_proto_rawDescGZIP(), []int{16}
}

func (x *GetMeetingTokenResp) GetMeetingID() string {
	if x != nil {
		return x.MeetingID
	}
	return ""
}

func (x *GetMeetingTokenResp) GetLiveKit() *LiveKit {
	if x != nil {
		return x.LiveKit
	}
	return nil
}

// Request to leave a meeting.
type LeaveMeetingReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MeetingID     string                 `protobuf:"bytes,1,opt,name=meetingID,proto3" json:"meetingID,omitempty"`
	UserID        string                 `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID,omitempty"` // User who leaves the room.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LeaveMeetingReq) Reset() {
	*x = LeaveMeetingReq{}
	mi := &file_meeting_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LeaveMeetingReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaveMeetingReq) ProtoMessage() {}

func (x *LeaveMeetingReq) ProtoReflect() protoreflect.Message {
	mi := &file_meeting_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaveMeetingReq.ProtoReflect.Descriptor instead.
func (*LeaveMeetingReq) Descriptor() ([]byte, []int) {
	return file_meeting_proto_rawDescGZIP(), []int{17}
}

func (x *LeaveMeetingReq) GetMeetingID() string {
	if x != nil {
		return x.MeetingID
	}
	return ""
}

func (x *LeaveMeetingReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

// Response after leaving a meeting.
type LeaveMeetingResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LeaveMeetingResp) Reset() {
	*x = LeaveMeetingResp{}
	mi := &file_meeting_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LeaveMeetingResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaveMeetingResp) ProtoMessage() {}

func (x *LeaveMeetingResp) ProtoReflect() protoreflect.Message {
	mi := &file_meeting_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaveMeetingResp.ProtoReflect.Descriptor instead.
func (*LeaveMeetingResp) Descriptor() ([]byte, []int) {
	return file_meeting_proto_rawDescGZIP(), []int{18}
}

// Request to end a meeting.
type EndMeetingReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MeetingID     string                 `protobuf:"bytes,1,opt,name=meetingID,proto3" json:"meetingID,omitempty"`
	UserID        string                 `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID,omitempty"`
	EndType       MeetingEndType         `protobuf:"varint,3,opt,name=endType,proto3,enum=openmeeting.meeting.MeetingEndType" json:"endType,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EndMeetingReq) Reset() {
	*x = EndMeetingReq{}
	mi := &file_meeting_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EndMeetingReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndMeetingReq) ProtoMessage() {}

func (x *EndMeetingReq) ProtoReflect() protoreflect.Message {
	mi := &file_meeting_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndMeetingReq.ProtoReflect.Descriptor instead.
func (*EndMeetingReq) Descriptor() ([]byte, []int) {
	return file_meeting_proto_rawDescGZIP(), []int{19}
}

func (x *EndMeetingReq) GetMeetingID() string {
	if x != nil {
		return x.MeetingID
	}
	return ""
}

func (x *EndMeetingReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *EndMeetingReq) GetEndType() MeetingEndType {
	if x != nil {
		return x.EndType
	}
	return MeetingEndType_CancelType
}

// Response after ending a meeting.
type EndMeetingResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EndMeetingResp) Reset() {
	*x = EndMeetingResp{}
	mi := &file_meeting_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EndMeetingResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndMeetingResp) ProtoMessage() {}

func (x *EndMeetingResp) ProtoReflect() protoreflect.Message {
	mi := &file_meeting_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndMeetingResp.ProtoReflect.Descriptor instead.
func (*EndMeetingResp) Descriptor() ([]byte, []int) {
	return file_meeting_proto_rawDescGZIP(), []int{20}
}

// Request to get a list of meetings both created and joined by a user.
type GetMeetingsReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserID        string                 `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"` // The unique identifier of the user.
	Status        []string               `protobuf:"bytes,2,rep,name=status,proto3" json:"status,omitempty"` // The status filter for meetings, e.g., "scheduled", "in-progress", "completed".
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMeetingsReq) Reset() {
	*x = GetMeetingsReq{}
	mi := &file_meeting_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMeetingsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMeetingsReq) ProtoMessage() {}

func (x *GetMeetingsReq) ProtoReflect() protoreflect.Message {
	mi := &file_meeting_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMeetingsReq.ProtoReflect.Descriptor instead.
func (*GetMeetingsReq) Descriptor() ([]byte, []int) {
	return file_meeting_proto_rawDescGZIP(), []int{21}
}

func (x *GetMeetingsReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *GetMeetingsReq) GetStatus() []string {
	if x != nil {
		return x.Status
	}
	return nil
}

// Response with a list of meetings that the user has created or joined.
type GetMeetingsResp struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	MeetingDetails []*MeetingInfoSetting  `protobuf:"bytes,1,rep,name=meetingDetails,proto3" json:"meetingDetails,omitempty"` // Detailed information about each meeting.
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GetMeetingsResp) Reset() {
	*x = GetMeetingsResp{}
	mi := &file_meeting_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMeetingsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMeetingsResp) ProtoMessage() {}

func (x *GetMeetingsResp) ProtoReflect() protoreflect.Message {
	mi := &file_meeting_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMeetingsResp.ProtoReflect.Descriptor instead.
func (*GetMeetingsResp) Descriptor() ([]byte, []int) {
	return file_meeting_proto_rawDescGZIP(), []int{22}
}

func (x *GetMeetingsResp) GetMeetingDetails() []*MeetingInfoSetting {
	if x != nil {
		return x.MeetingDetails
	}
	return nil
}

// Request to get information about a specific meeting.
type GetMeetingReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserID        string                 `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"`
	MeetingID     string                 `protobuf:"bytes,2,opt,name=meetingID,proto3" json:"meetingID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMeetingReq) Reset() {
	*x = GetMeetingReq{}
	mi := &file_meeting_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMeetingReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMeetingReq) ProtoMessage() {}

func (x *GetMeetingReq) ProtoReflect() protoreflect.Message {
	mi := &file_meeting_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMeetingReq.ProtoReflect.Descriptor instead.
func (*GetMeetingReq) Descriptor() ([]byte, []int) {
	return file_meeting_proto_rawDescGZIP(), []int{23}
}

func (x *GetMeetingReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *GetMeetingReq) GetMeetingID() string {
	if x != nil {
		return x.MeetingID
	}
	return ""
}

// Response with detailed information about a meeting.
type GetMeetingResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MeetingDetail *MeetingInfoSetting    `protobuf:"bytes,1,opt,name=meetingDetail,proto3" json:"meetingDetail,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMeetingResp) Reset() {
	*x = GetMeetingResp{}
	mi := &file_meeting_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMeetingResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMeetingResp) ProtoMessage() {}

func (x *GetMeetingResp) ProtoReflect() protoreflect.Message {
	mi := &file_meeting_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMeetingResp.ProtoReflect.Descriptor instead.
func (*GetMeetingResp) Descriptor() ([]byte, []int) {
	return file_meeting_proto_rawDescGZIP(), []int{24}
}

func (x *GetMeetingResp) GetMeetingDetail() *MeetingInfoSetting {
	if x != nil {
		return x.MeetingDetail
	}
	return nil
}

type ModifyMeetingParticipantNickNameReq struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	MeetingID         string                 `protobuf:"bytes,1,opt,name=meetingID,proto3" json:"meetingID,omitempty"`
	UserID            string                 `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID,omitempty"`
	ParticipantUserID string                 `protobuf:"bytes,3,opt,name=participantUserID,proto3" json:"participantUserID,omitempty"`
	Nickname          string                 `protobuf:"bytes,4,opt,name=nickname,proto3" json:"nickname,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ModifyMeetingParticipantNickNameReq) Reset() {
	*x = ModifyMeetingParticipantNickNameReq{}
	mi := &file_meeting_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModifyMeetingParticipantNickNameReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyMeetingParticipantNickNameReq) ProtoMessage() {}

func (x *ModifyMeetingParticipantNickNameReq) ProtoReflect() protoreflect.Message {
	mi := &file_meeting_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyMeetingParticipantNickNameReq.ProtoReflect.Descriptor instead.
func (*ModifyMeetingParticipantNickNameReq) Descriptor() ([]byte, []int) {
	return file_meeting_proto_rawDescGZIP(), []int{25}
}

func (x *ModifyMeetingParticipantNickNameReq) GetMeetingID() string {
	if x != nil {
		return x.MeetingID
	}
	return ""
}

func (x *ModifyMeetingParticipantNickNameReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *ModifyMeetingParticipantNickNameReq) GetParticipantUserID() string {
	if x != nil {
		return x.ParticipantUserID
	}
	return ""
}

func (x *ModifyMeetingParticipantNickNameReq) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

type ModifyMeetingParticipantNickNameResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ModifyMeetingParticipantNickNameResp) Reset() {
	*x = ModifyMeetingParticipantNickNameResp{}
	mi := &file_meeting_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModifyMeetingParticipantNickNameResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyMeetingParticipantNickNameResp) ProtoMessage() {}

func (x *ModifyMeetingParticipantNickNameResp) ProtoReflect() protoreflect.Message {
	mi := &file_meeting_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyMeetingParticipantNickNameResp.ProtoReflect.Descriptor instead.
func (*ModifyMeetingParticipantNickNameResp) Descriptor() ([]byte, []int) {
	return file_meeting_proto_rawDescGZIP(), []int{26}
}

// Request to update specific fields of a meeting.
type UpdateMeetingRequest struct {
	state                           protoimpl.MessageState  `protogen:"open.v1"`
	MeetingID                       string                  `protobuf:"bytes,1,opt,name=meetingID,proto3" json:"meetingID,omitempty"`
	UpdatingUserID                  string                  `protobuf:"bytes,2,opt,name=updatingUserID,proto3" json:"updatingUserID,omitempty"`
	Title                           *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	ScheduledTime                   *wrapperspb.Int64Value  `protobuf:"bytes,4,opt,name=scheduledTime,proto3" json:"scheduledTime,omitempty"`
	MeetingDuration                 *wrapperspb.Int64Value  `protobuf:"bytes,5,opt,name=meetingDuration,proto3" json:"meetingDuration,omitempty"`
	Password                        *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=password,proto3" json:"password,omitempty"`
	TimeZone                        *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=timeZone,proto3" json:"timeZone,omitempty"`
	RepeatInfo                      *MeetingRepeatInfo      `protobuf:"bytes,8,opt,name=repeatInfo,proto3" json:"repeatInfo,omitempty"`
	CanParticipantsEnableCamera     *wrapperspb.BoolValue   `protobuf:"bytes,9,opt,name=canParticipantsEnableCamera,proto3" json:"canParticipantsEnableCamera,omitempty"`
	CanParticipantsUnmuteMicrophone *wrapperspb.BoolValue   `protobuf:"bytes,10,opt,name=canParticipantsUnmuteMicrophone,proto3" json:"canParticipantsUnmuteMicrophone,omitempty"`
	CanParticipantsShareScreen      *wrapperspb.BoolValue   `protobuf:"bytes,11,opt,name=canParticipantsShareScreen,proto3" json:"canParticipantsShareScreen,omitempty"`
	DisableCameraOnJoin             *wrapperspb.BoolValue   `protobuf:"bytes,12,opt,name=disableCameraOnJoin,proto3" json:"disableCameraOnJoin,omitempty"`
	DisableMicrophoneOnJoin         *wrapperspb.BoolValue   `protobuf:"bytes,13,opt,name=disableMicrophoneOnJoin,proto3" json:"disableMicrophoneOnJoin,omitempty"`
	CanParticipantJoinMeetingEarly  *wrapperspb.BoolValue   `protobuf:"bytes,14,opt,name=canParticipantJoinMeetingEarly,proto3" json:"canParticipantJoinMeetingEarly,omitempty"` // Allow participants to join the meeting early.
	LockMeeting                     *wrapperspb.BoolValue   `protobuf:"bytes,15,opt,name=lockMeeting,proto3" json:"lockMeeting,omitempty"`                                       // if the meeting is locked, new comer could not join the meeting.
	AudioEncouragement              *wrapperspb.BoolValue   `protobuf:"bytes,16,opt,name=audioEncouragement,proto3" json:"audioEncouragement,omitempty"`                         // could turn on the audio encouragement for client.
	VideoMirroring                  *wrapperspb.BoolValue   `protobuf:"bytes,17,opt,name=videoMirroring,proto3" json:"videoMirroring,omitempty"`                                 // could turn on the video mirroring for client.
	unknownFields                   protoimpl.UnknownFields
	sizeCache                       protoimpl.SizeCache
}

func (x *UpdateMeetingRequest) Reset() {
	*x = UpdateMeetingRequest{}
	mi := &file_meeting_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateMeetingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMeetingRequest) ProtoMessage() {}

func (x *UpdateMeetingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_meeting_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMeetingRequest.ProtoReflect.Descriptor instead.
func (*UpdateMeetingRequest) Descriptor() ([]byte, []int) {
	return file_meeting_proto_rawDescGZIP(), []int{27}
}

func (x *UpdateMeetingRequest) GetMeetingID() string {
	if x != nil {
		return x.MeetingID
	}
	return ""
}

func (x *UpdateMeetingRequest) GetUpdatingUserID() string {
	if x != nil {
		return x.UpdatingUserID
	}
	return ""
}

func (x *UpdateMeetingRequest) GetTitle() *wrapperspb.StringValue {
	if x != nil {
		return x.Title
	}
	return nil
}

func (x *UpdateMeetingRequest) GetScheduledTime() *wrapperspb.Int64Value {
	if x != nil {
		return x.ScheduledTime
	}
	return nil
}

func (x *UpdateMeetingRequest) GetMeetingDuration() *wrapperspb.Int64Value {
	if x != nil {
		return x.MeetingDuration
	}
	return nil
}

func (x *UpdateMeetingRequest) GetPassword() *wrapperspb.StringValue {
	if x != nil {
		return x.Password
	}
	return nil
}

func (x *UpdateMeetingRequest) GetTimeZone() *wrapperspb.StringValue {
	if x != nil {
		return x.TimeZone
	}
	return nil
}

func (x *UpdateMeetingRequest) GetRepeatInfo() *MeetingRepeatInfo {
	if x != nil {
		return x.RepeatInfo
	}
	return nil
}

func (x *UpdateMeetingRequest) GetCanParticipantsEnableCamera() *wrapperspb.BoolValue {
	if x != nil {
		return x.CanParticipantsEnableCamera
	}
	return nil
}

func (x *UpdateMeetingRequest) GetCanParticipantsUnmuteMicrophone() *wrapperspb.BoolValue {
	if x != nil {
		return x.CanParticipantsUnmuteMicrophone
	}
	return nil
}

func (x *UpdateMeetingRequest) GetCanParticipantsShareScreen() *wrapperspb.BoolValue {
	if x != nil {
		return x.CanParticipantsShareScreen
	}
	return nil
}

func (x *UpdateMeetingRequest) GetDisableCameraOnJoin() *wrapperspb.BoolValue {
	if x != nil {
		return x.DisableCameraOnJoin
	}
	return nil
}

func (x *UpdateMeetingRequest) GetDisableMicrophoneOnJoin() *wrapperspb.BoolValue {
	if x != nil {
		return x.DisableMicrophoneOnJoin
	}
	return nil
}

func (x *UpdateMeetingRequest) GetCanParticipantJoinMeetingEarly() *wrapperspb.BoolValue {
	if x != nil {
		return x.CanParticipantJoinMeetingEarly
	}
	return nil
}

func (x *UpdateMeetingRequest) GetLockMeeting() *wrapperspb.BoolValue {
	if x != nil {
		return x.LockMeeting
	}
	return nil
}

func (x *UpdateMeetingRequest) GetAudioEncouragement() *wrapperspb.BoolValue {
	if x != nil {
		return x.AudioEncouragement
	}
	return nil
}

func (x *UpdateMeetingRequest) GetVideoMirroring() *wrapperspb.BoolValue {
	if x != nil {
		return x.VideoMirroring
	}
	return nil
}

// Response after updating meeting settings.
type UpdateMeetingResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateMeetingResp) Reset() {
	*x = UpdateMeetingResp{}
	mi := &file_meeting_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateMeetingResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMeetingResp) ProtoMessage() {}

func (x *UpdateMeetingResp) ProtoReflect() protoreflect.Message {
	mi := &file_meeting_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMeetingResp.ProtoReflect.Descriptor instead.
func (*UpdateMeetingResp) Descriptor() ([]byte, []int) {
	return file_meeting_proto_rawDescGZIP(), []int{28}
}

// Personal meeting settings related to video and audio on entry.
type PersonalMeetingSetting struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	CameraOnEntry     bool                   `protobuf:"varint,1,opt,name=cameraOnEntry,proto3" json:"cameraOnEntry,omitempty"`         // Whether the camera should be enabled by default when joining the meeting.
	MicrophoneOnEntry bool                   `protobuf:"varint,2,opt,name=microphoneOnEntry,proto3" json:"microphoneOnEntry,omitempty"` // Whether the microphone should be enabled by default when joining the meeting.
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *PersonalMeetingSetting) Reset() {
	*x = PersonalMeetingSetting{}
	mi := &file_meeting_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PersonalMeetingSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PersonalMeetingSetting) ProtoMessage() {}

func (x *PersonalMeetingSetting) ProtoReflect() protoreflect.Message {
	mi := &file_meeting_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PersonalMeetingSetting.ProtoReflect.Descriptor instead.
func (*PersonalMeetingSetting) Descriptor() ([]byte, []int) {
	return file_meeting_proto_rawDescGZIP(), []int{29}
}

func (x *PersonalMeetingSetting) GetCameraOnEntry() bool {
	if x != nil {
		return x.CameraOnEntry
	}
	return false
}

func (x *PersonalMeetingSetting) GetMicrophoneOnEntry() bool {
	if x != nil {
		return x.MicrophoneOnEntry
	}
	return false
}

// Request to get personal meeting settings.
type GetPersonalMeetingSettingsReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MeetingID     string                 `protobuf:"bytes,1,opt,name=meetingID,proto3" json:"meetingID,omitempty"`
	UserID        string                 `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPersonalMeetingSettingsReq) Reset() {
	*x = GetPersonalMeetingSettingsReq{}
	mi := &file_meeting_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPersonalMeetingSettingsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPersonalMeetingSettingsReq) ProtoMessage() {}

func (x *GetPersonalMeetingSettingsReq) ProtoReflect() protoreflect.Message {
	mi := &file_meeting_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPersonalMeetingSettingsReq.ProtoReflect.Descriptor instead.
func (*GetPersonalMeetingSettingsReq) Descriptor() ([]byte, []int) {
	return file_meeting_proto_rawDescGZIP(), []int{30}
}

func (x *GetPersonalMeetingSettingsReq) GetMeetingID() string {
	if x != nil {
		return x.MeetingID
	}
	return ""
}

func (x *GetPersonalMeetingSettingsReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

// Response with personal meeting settings.
type GetPersonalMeetingSettingsResp struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Setting       *PersonalMeetingSetting `protobuf:"bytes,1,opt,name=setting,proto3" json:"setting,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPersonalMeetingSettingsResp) Reset() {
	*x = GetPersonalMeetingSettingsResp{}
	mi := &file_meeting_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPersonalMeetingSettingsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPersonalMeetingSettingsResp) ProtoMessage() {}

func (x *GetPersonalMeetingSettingsResp) ProtoReflect() protoreflect.Message {
	mi := &file_meeting_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPersonalMeetingSettingsResp.ProtoReflect.Descriptor instead.
func (*GetPersonalMeetingSettingsResp) Descriptor() ([]byte, []int) {
	return file_meeting_proto_rawDescGZIP(), []int{31}
}

func (x *GetPersonalMeetingSettingsResp) GetSetting() *PersonalMeetingSetting {
	if x != nil {
		return x.Setting
	}
	return nil
}

// Request to set personal meeting settings.
type SetPersonalMeetingSettingsReq struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	MeetingID         string                 `protobuf:"bytes,1,opt,name=meetingID,proto3" json:"meetingID,omitempty"`
	UserID            string                 `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID,omitempty"`
	CameraOnEntry     *wrapperspb.BoolValue  `protobuf:"bytes,3,opt,name=cameraOnEntry,proto3" json:"cameraOnEntry,omitempty"`         // Whether the camera should be enabled by default when joining the meeting.
	MicrophoneOnEntry *wrapperspb.BoolValue  `protobuf:"bytes,4,opt,name=microphoneOnEntry,proto3" json:"microphoneOnEntry,omitempty"` // Whether the microphone should be enabled by default when joining the meeting.
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *SetPersonalMeetingSettingsReq) Reset() {
	*x = SetPersonalMeetingSettingsReq{}
	mi := &file_meeting_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetPersonalMeetingSettingsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPersonalMeetingSettingsReq) ProtoMessage() {}

func (x *SetPersonalMeetingSettingsReq) ProtoReflect() protoreflect.Message {
	mi := &file_meeting_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPersonalMeetingSettingsReq.ProtoReflect.Descriptor instead.
func (*SetPersonalMeetingSettingsReq) Descriptor() ([]byte, []int) {
	return file_meeting_proto_rawDescGZIP(), []int{32}
}

func (x *SetPersonalMeetingSettingsReq) GetMeetingID() string {
	if x != nil {
		return x.MeetingID
	}
	return ""
}

func (x *SetPersonalMeetingSettingsReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *SetPersonalMeetingSettingsReq) GetCameraOnEntry() *wrapperspb.BoolValue {
	if x != nil {
		return x.CameraOnEntry
	}
	return nil
}

func (x *SetPersonalMeetingSettingsReq) GetMicrophoneOnEntry() *wrapperspb.BoolValue {
	if x != nil {
		return x.MicrophoneOnEntry
	}
	return nil
}

// Response after setting personal meeting settings.
type SetPersonalMeetingSettingsResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetPersonalMeetingSettingsResp) Reset() {
	*x = SetPersonalMeetingSettingsResp{}
	mi := &file_meeting_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetPersonalMeetingSettingsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPersonalMeetingSettingsResp) ProtoMessage() {}

func (x *SetPersonalMeetingSettingsResp) ProtoReflect() protoreflect.Message {
	mi := &file_meeting_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPersonalMeetingSettingsResp.ProtoReflect.Descriptor instead.
func (*SetPersonalMeetingSettingsResp) Descriptor() ([]byte, []int) {
	return file_meeting_proto_rawDescGZIP(), []int{33}
}

type PersonalData struct {
	state           protoimpl.MessageState  `protogen:"open.v1"`
	UserID          string                  `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"`
	PersonalSetting *PersonalMeetingSetting `protobuf:"bytes,2,opt,name=personalSetting,proto3" json:"personalSetting,omitempty"`
	// limitSetting is that host user limit this user's stream operation
	LimitSetting  *PersonalMeetingSetting `protobuf:"bytes,3,opt,name=limitSetting,proto3" json:"limitSetting,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PersonalData) Reset() {
	*x = PersonalData{}
	mi := &file_meeting_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PersonalData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PersonalData) ProtoMessage() {}

func (x *PersonalData) ProtoReflect() protoreflect.Message {
	mi := &file_meeting_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PersonalData.ProtoReflect.Descriptor instead.
func (*PersonalData) Descriptor() ([]byte, []int) {
	return file_meeting_proto_rawDescGZIP(), []int{34}
}

func (x *PersonalData) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *PersonalData) GetPersonalSetting() *PersonalMeetingSetting {
	if x != nil {
		return x.PersonalSetting
	}
	return nil
}

func (x *PersonalData) GetLimitSetting() *PersonalMeetingSetting {
	if x != nil {
		return x.LimitSetting
	}
	return nil
}

// Metadata about a meeting, primarily used for encapsulating meeting details.
type MeetingMetadata struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Detail        *MeetingInfoSetting    `protobuf:"bytes,1,opt,name=detail,proto3" json:"detail,omitempty"`
	PersonalData  []*PersonalData        `protobuf:"bytes,2,rep,name=personalData,proto3" json:"personalData,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MeetingMetadata) Reset() {
	*x = MeetingMetadata{}
	mi := &file_meeting_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MeetingMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeetingMetadata) ProtoMessage() {}

func (x *MeetingMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_meeting_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeetingMetadata.ProtoReflect.Descriptor instead.
func (*MeetingMetadata) Descriptor() ([]byte, []int) {
	return file_meeting_proto_rawDescGZIP(), []int{35}
}

func (x *MeetingMetadata) GetDetail() *MeetingInfoSetting {
	if x != nil {
		return x.Detail
	}
	return nil
}

func (x *MeetingMetadata) GetPersonalData() []*PersonalData {
	if x != nil {
		return x.PersonalData
	}
	return nil
}

// operate room all stream related to video and audio on entry.
type OperateRoomAllStreamReq struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	MeetingID         string                 `protobuf:"bytes,1,opt,name=meetingID,proto3" json:"meetingID,omitempty"`
	OperatorUserID    string                 `protobuf:"bytes,2,opt,name=operatorUserID,proto3" json:"operatorUserID,omitempty"`
	CameraOnEntry     *wrapperspb.BoolValue  `protobuf:"bytes,3,opt,name=cameraOnEntry,proto3" json:"cameraOnEntry,omitempty"`         // Whether the camera should be enabled by default when joining the meeting.
	MicrophoneOnEntry *wrapperspb.BoolValue  `protobuf:"bytes,4,opt,name=microphoneOnEntry,proto3" json:"microphoneOnEntry,omitempty"` // Whether the microphone should be enabled by default when joining the meeting.
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *OperateRoomAllStreamReq) Reset() {
	*x = OperateRoomAllStreamReq{}
	mi := &file_meeting_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OperateRoomAllStreamReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperateRoomAllStreamReq) ProtoMessage() {}

func (x *OperateRoomAllStreamReq) ProtoReflect() protoreflect.Message {
	mi := &file_meeting_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperateRoomAllStreamReq.ProtoReflect.Descriptor instead.
func (*OperateRoomAllStreamReq) Descriptor() ([]byte, []int) {
	return file_meeting_proto_rawDescGZIP(), []int{36}
}

func (x *OperateRoomAllStreamReq) GetMeetingID() string {
	if x != nil {
		return x.MeetingID
	}
	return ""
}

func (x *OperateRoomAllStreamReq) GetOperatorUserID() string {
	if x != nil {
		return x.OperatorUserID
	}
	return ""
}

func (x *OperateRoomAllStreamReq) GetCameraOnEntry() *wrapperspb.BoolValue {
	if x != nil {
		return x.CameraOnEntry
	}
	return nil
}

func (x *OperateRoomAllStreamReq) GetMicrophoneOnEntry() *wrapperspb.BoolValue {
	if x != nil {
		return x.MicrophoneOnEntry
	}
	return nil
}

// Response with operate room all stream.
type OperateRoomAllStreamResp struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	StreamNotExistUserIDList []string               `protobuf:"bytes,1,rep,name=streamNotExistUserIDList,proto3" json:"streamNotExistUserIDList,omitempty"`
	FailedUserIDList         []string               `protobuf:"bytes,2,rep,name=failedUserIDList,proto3" json:"failedUserIDList,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *OperateRoomAllStreamResp) Reset() {
	*x = OperateRoomAllStreamResp{}
	mi := &file_meeting_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OperateRoomAllStreamResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperateRoomAllStreamResp) ProtoMessage() {}

func (x *OperateRoomAllStreamResp) ProtoReflect() protoreflect.Message {
	mi := &file_meeting_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperateRoomAllStreamResp.ProtoReflect.Descriptor instead.
func (*OperateRoomAllStreamResp) Descriptor() ([]byte, []int) {
	return file_meeting_proto_rawDescGZIP(), []int{37}
}

func (x *OperateRoomAllStreamResp) GetStreamNotExistUserIDList() []string {
	if x != nil {
		return x.StreamNotExistUserIDList
	}
	return nil
}

func (x *OperateRoomAllStreamResp) GetFailedUserIDList() []string {
	if x != nil {
		return x.FailedUserIDList
	}
	return nil
}

type RemoveMeetingParticipantsReq struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	MeetingID          string                 `protobuf:"bytes,1,opt,name=meetingID,proto3" json:"meetingID,omitempty"`
	UserID             string                 `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID,omitempty"`
	ParticipantUserIDs []string               `protobuf:"bytes,3,rep,name=participantUserIDs,proto3" json:"participantUserIDs,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *RemoveMeetingParticipantsReq) Reset() {
	*x = RemoveMeetingParticipantsReq{}
	mi := &file_meeting_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveMeetingParticipantsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveMeetingParticipantsReq) ProtoMessage() {}

func (x *RemoveMeetingParticipantsReq) ProtoReflect() protoreflect.Message {
	mi := &file_meeting_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveMeetingParticipantsReq.ProtoReflect.Descriptor instead.
func (*RemoveMeetingParticipantsReq) Descriptor() ([]byte, []int) {
	return file_meeting_proto_rawDescGZIP(), []int{38}
}

func (x *RemoveMeetingParticipantsReq) GetMeetingID() string {
	if x != nil {
		return x.MeetingID
	}
	return ""
}

func (x *RemoveMeetingParticipantsReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *RemoveMeetingParticipantsReq) GetParticipantUserIDs() []string {
	if x != nil {
		return x.ParticipantUserIDs
	}
	return nil
}

type RemoveMeetingParticipantsResp struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	SuccessUserIDList []string               `protobuf:"bytes,1,rep,name=successUserIDList,proto3" json:"successUserIDList,omitempty"`
	FailedUserIDList  []string               `protobuf:"bytes,2,rep,name=failedUserIDList,proto3" json:"failedUserIDList,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *RemoveMeetingParticipantsResp) Reset() {
	*x = RemoveMeetingParticipantsResp{}
	mi := &file_meeting_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveMeetingParticipantsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveMeetingParticipantsResp) ProtoMessage() {}

func (x *RemoveMeetingParticipantsResp) ProtoReflect() protoreflect.Message {
	mi := &file_meeting_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveMeetingParticipantsResp.ProtoReflect.Descriptor instead.
func (*RemoveMeetingParticipantsResp) Descriptor() ([]byte, []int) {
	return file_meeting_proto_rawDescGZIP(), []int{39}
}

func (x *RemoveMeetingParticipantsResp) GetSuccessUserIDList() []string {
	if x != nil {
		return x.SuccessUserIDList
	}
	return nil
}

func (x *RemoveMeetingParticipantsResp) GetFailedUserIDList() []string {
	if x != nil {
		return x.FailedUserIDList
	}
	return nil
}

type SetMeetingHostInfoReq struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	MeetingID     string                  `protobuf:"bytes,1,opt,name=meetingID,proto3" json:"meetingID,omitempty"`
	UserID        string                  `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID,omitempty"`
	HostUserID    *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=hostUserID,proto3" json:"hostUserID,omitempty"`
	CoHostUserIDs []string                `protobuf:"bytes,4,rep,name=coHostUserIDs,proto3" json:"coHostUserIDs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetMeetingHostInfoReq) Reset() {
	*x = SetMeetingHostInfoReq{}
	mi := &file_meeting_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetMeetingHostInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetMeetingHostInfoReq) ProtoMessage() {}

func (x *SetMeetingHostInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_meeting_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetMeetingHostInfoReq.ProtoReflect.Descriptor instead.
func (*SetMeetingHostInfoReq) Descriptor() ([]byte, []int) {
	return file_meeting_proto_rawDescGZIP(), []int{40}
}

func (x *SetMeetingHostInfoReq) GetMeetingID() string {
	if x != nil {
		return x.MeetingID
	}
	return ""
}

func (x *SetMeetingHostInfoReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *SetMeetingHostInfoReq) GetHostUserID() *wrapperspb.StringValue {
	if x != nil {
		return x.HostUserID
	}
	return nil
}

func (x *SetMeetingHostInfoReq) GetCoHostUserIDs() []string {
	if x != nil {
		return x.CoHostUserIDs
	}
	return nil
}

type SetMeetingHostInfoResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetMeetingHostInfoResp) Reset() {
	*x = SetMeetingHostInfoResp{}
	mi := &file_meeting_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetMeetingHostInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetMeetingHostInfoResp) ProtoMessage() {}

func (x *SetMeetingHostInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_meeting_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetMeetingHostInfoResp.ProtoReflect.Descriptor instead.
func (*SetMeetingHostInfoResp) Descriptor() ([]byte, []int) {
	return file_meeting_proto_rawDescGZIP(), []int{41}
}

type NotifyMeetingData struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	OperatorUserID string                 `protobuf:"bytes,1,opt,name=operatorUserID,proto3" json:"operatorUserID,omitempty"`
	// Types that are valid to be assigned to MessageType:
	//
	//	*NotifyMeetingData_StreamOperateData
	//	*NotifyMeetingData_MeetingHostData
	//	*NotifyMeetingData_KickOffMeetingData
	MessageType   isNotifyMeetingData_MessageType `protobuf_oneof:"messageType"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NotifyMeetingData) Reset() {
	*x = NotifyMeetingData{}
	mi := &file_meeting_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NotifyMeetingData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyMeetingData) ProtoMessage() {}

func (x *NotifyMeetingData) ProtoReflect() protoreflect.Message {
	mi := &file_meeting_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyMeetingData.ProtoReflect.Descriptor instead.
func (*NotifyMeetingData) Descriptor() ([]byte, []int) {
	return file_meeting_proto_rawDescGZIP(), []int{42}
}

func (x *NotifyMeetingData) GetOperatorUserID() string {
	if x != nil {
		return x.OperatorUserID
	}
	return ""
}

func (x *NotifyMeetingData) GetMessageType() isNotifyMeetingData_MessageType {
	if x != nil {
		return x.MessageType
	}
	return nil
}

func (x *NotifyMeetingData) GetStreamOperateData() *StreamOperateData {
	if x != nil {
		if x, ok := x.MessageType.(*NotifyMeetingData_StreamOperateData); ok {
			return x.StreamOperateData
		}
	}
	return nil
}

func (x *NotifyMeetingData) GetMeetingHostData() *MeetingHostData {
	if x != nil {
		if x, ok := x.MessageType.(*NotifyMeetingData_MeetingHostData); ok {
			return x.MeetingHostData
		}
	}
	return nil
}

func (x *NotifyMeetingData) GetKickOffMeetingData() *KickOffMeetingData {
	if x != nil {
		if x, ok := x.MessageType.(*NotifyMeetingData_KickOffMeetingData); ok {
			return x.KickOffMeetingData
		}
	}
	return nil
}

type isNotifyMeetingData_MessageType interface {
	isNotifyMeetingData_MessageType()
}

type NotifyMeetingData_StreamOperateData struct {
	StreamOperateData *StreamOperateData `protobuf:"bytes,2,opt,name=streamOperateData,proto3,oneof"`
}

type NotifyMeetingData_MeetingHostData struct {
	MeetingHostData *MeetingHostData `protobuf:"bytes,3,opt,name=meetingHostData,proto3,oneof"`
}

type NotifyMeetingData_KickOffMeetingData struct {
	KickOffMeetingData *KickOffMeetingData `protobuf:"bytes,4,opt,name=kickOffMeetingData,proto3,oneof"`
}

func (*NotifyMeetingData_StreamOperateData) isNotifyMeetingData_MessageType() {}

func (*NotifyMeetingData_MeetingHostData) isNotifyMeetingData_MessageType() {}

func (*NotifyMeetingData_KickOffMeetingData) isNotifyMeetingData_MessageType() {}

type KickOffMeetingData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserID        string                 `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"`
	Nickname      string                 `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname,omitempty"`
	ReasonCode    KickOffReason          `protobuf:"varint,3,opt,name=reasonCode,proto3,enum=openmeeting.meeting.KickOffReason" json:"reasonCode,omitempty"`
	Reason        string                 `protobuf:"bytes,4,opt,name=reason,proto3" json:"reason,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KickOffMeetingData) Reset() {
	*x = KickOffMeetingData{}
	mi := &file_meeting_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KickOffMeetingData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KickOffMeetingData) ProtoMessage() {}

func (x *KickOffMeetingData) ProtoReflect() protoreflect.Message {
	mi := &file_meeting_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KickOffMeetingData.ProtoReflect.Descriptor instead.
func (*KickOffMeetingData) Descriptor() ([]byte, []int) {
	return file_meeting_proto_rawDescGZIP(), []int{43}
}

func (x *KickOffMeetingData) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *KickOffMeetingData) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *KickOffMeetingData) GetReasonCode() KickOffReason {
	if x != nil {
		return x.ReasonCode
	}
	return KickOffReason_DuplicatedLogin
}

func (x *KickOffMeetingData) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type StreamOperateData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Operation     []*UserOperationData   `protobuf:"bytes,1,rep,name=operation,proto3" json:"operation,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamOperateData) Reset() {
	*x = StreamOperateData{}
	mi := &file_meeting_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamOperateData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamOperateData) ProtoMessage() {}

func (x *StreamOperateData) ProtoReflect() protoreflect.Message {
	mi := &file_meeting_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamOperateData.ProtoReflect.Descriptor instead.
func (*StreamOperateData) Descriptor() ([]byte, []int) {
	return file_meeting_proto_rawDescGZIP(), []int{44}
}

func (x *StreamOperateData) GetOperation() []*UserOperationData {
	if x != nil {
		return x.Operation
	}
	return nil
}

type UserOperationData struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	UserID            string                 `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"`
	CameraOnEntry     *wrapperspb.BoolValue  `protobuf:"bytes,2,opt,name=cameraOnEntry,proto3" json:"cameraOnEntry,omitempty"`         // Whether the camera should be enabled
	MicrophoneOnEntry *wrapperspb.BoolValue  `protobuf:"bytes,3,opt,name=microphoneOnEntry,proto3" json:"microphoneOnEntry,omitempty"` // Whether the microphone should be enabled
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *UserOperationData) Reset() {
	*x = UserOperationData{}
	mi := &file_meeting_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserOperationData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserOperationData) ProtoMessage() {}

func (x *UserOperationData) ProtoReflect() protoreflect.Message {
	mi := &file_meeting_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserOperationData.ProtoReflect.Descriptor instead.
func (*UserOperationData) Descriptor() ([]byte, []int) {
	return file_meeting_proto_rawDescGZIP(), []int{45}
}

func (x *UserOperationData) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *UserOperationData) GetCameraOnEntry() *wrapperspb.BoolValue {
	if x != nil {
		return x.CameraOnEntry
	}
	return nil
}

func (x *UserOperationData) GetMicrophoneOnEntry() *wrapperspb.BoolValue {
	if x != nil {
		return x.MicrophoneOnEntry
	}
	return nil
}

type MeetingHostData struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	OperatorNickname string                 `protobuf:"bytes,2,opt,name=operatorNickname,proto3" json:"operatorNickname,omitempty"`
	UserID           string                 `protobuf:"bytes,3,opt,name=userID,proto3" json:"userID,omitempty"`
	HostType         string                 `protobuf:"bytes,4,opt,name=hostType,proto3" json:"hostType,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *MeetingHostData) Reset() {
	*x = MeetingHostData{}
	mi := &file_meeting_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MeetingHostData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeetingHostData) ProtoMessage() {}

func (x *MeetingHostData) ProtoReflect() protoreflect.Message {
	mi := &file_meeting_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeetingHostData.ProtoReflect.Descriptor instead.
func (*MeetingHostData) Descriptor() ([]byte, []int) {
	return file_meeting_proto_rawDescGZIP(), []int{46}
}

func (x *MeetingHostData) GetOperatorNickname() string {
	if x != nil {
		return x.OperatorNickname
	}
	return ""
}

func (x *MeetingHostData) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *MeetingHostData) GetHostType() string {
	if x != nil {
		return x.HostType
	}
	return ""
}

type CleanPreviousMeetingsReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserID        string                 `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"`
	ReasonCode    int32                  `protobuf:"varint,2,opt,name=reasonCode,proto3" json:"reasonCode,omitempty"`
	Reason        string                 `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CleanPreviousMeetingsReq) Reset() {
	*x = CleanPreviousMeetingsReq{}
	mi := &file_meeting_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CleanPreviousMeetingsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CleanPreviousMeetingsReq) ProtoMessage() {}

func (x *CleanPreviousMeetingsReq) ProtoReflect() protoreflect.Message {
	mi := &file_meeting_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CleanPreviousMeetingsReq.ProtoReflect.Descriptor instead.
func (*CleanPreviousMeetingsReq) Descriptor() ([]byte, []int) {
	return file_meeting_proto_rawDescGZIP(), []int{47}
}

func (x *CleanPreviousMeetingsReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CleanPreviousMeetingsReq) GetReasonCode() int32 {
	if x != nil {
		return x.ReasonCode
	}
	return 0
}

func (x *CleanPreviousMeetingsReq) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type CleanPreviousMeetingsResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CleanPreviousMeetingsResp) Reset() {
	*x = CleanPreviousMeetingsResp{}
	mi := &file_meeting_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CleanPreviousMeetingsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CleanPreviousMeetingsResp) ProtoMessage() {}

func (x *CleanPreviousMeetingsResp) ProtoReflect() protoreflect.Message {
	mi := &file_meeting_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CleanPreviousMeetingsResp.ProtoReflect.Descriptor instead.
func (*CleanPreviousMeetingsResp) Descriptor() ([]byte, []int) {
	return file_meeting_proto_rawDescGZIP(), []int{48}
}

type ToggleRecordMeetingReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MeetingID     string                 `protobuf:"bytes,1,opt,name=meetingID,proto3" json:"meetingID,omitempty"`
	UserID        string                 `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID,omitempty"`
	EnableRecord  bool                   `protobuf:"varint,3,opt,name=enableRecord,proto3" json:"enableRecord,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ToggleRecordMeetingReq) Reset() {
	*x = ToggleRecordMeetingReq{}
	mi := &file_meeting_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ToggleRecordMeetingReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToggleRecordMeetingReq) ProtoMessage() {}

func (x *ToggleRecordMeetingReq) ProtoReflect() protoreflect.Message {
	mi := &file_meeting_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToggleRecordMeetingReq.ProtoReflect.Descriptor instead.
func (*ToggleRecordMeetingReq) Descriptor() ([]byte, []int) {
	return file_meeting_proto_rawDescGZIP(), []int{49}
}

func (x *ToggleRecordMeetingReq) GetMeetingID() string {
	if x != nil {
		return x.MeetingID
	}
	return ""
}

func (x *ToggleRecordMeetingReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *ToggleRecordMeetingReq) GetEnableRecord() bool {
	if x != nil {
		return x.EnableRecord
	}
	return false
}

type ToggleRecordMeetingResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ToggleRecordMeetingResp) Reset() {
	*x = ToggleRecordMeetingResp{}
	mi := &file_meeting_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ToggleRecordMeetingResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToggleRecordMeetingResp) ProtoMessage() {}

func (x *ToggleRecordMeetingResp) ProtoReflect() protoreflect.Message {
	mi := &file_meeting_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToggleRecordMeetingResp.ProtoReflect.Descriptor instead.
func (*ToggleRecordMeetingResp) Descriptor() ([]byte, []int) {
	return file_meeting_proto_rawDescGZIP(), []int{50}
}

var File_meeting_proto protoreflect.FileDescriptor

const file_meeting_proto_rawDesc = "" +
	"\n" +
	"\rmeeting.proto\x12\x13openmeeting.meeting\x1a$protocol/wrapperspb/wrapperspb.proto\"1\n" +
	"\aLiveKit\x12\x14\n" +
	"\x05token\x18\x01 \x01(\tR\x05token\x12\x10\n" +
	"\x03url\x18\x02 \x01(\tR\x03url\"\xc0\x01\n" +
	"\x1aSystemGeneratedMeetingInfo\x12$\n" +
	"\rcreatorUserID\x18\x01 \x01(\tR\rcreatorUserID\x12(\n" +
	"\x0fcreatorNickname\x18\x02 \x01(\tR\x0fcreatorNickname\x12\x16\n" +
	"\x06status\x18\x03 \x01(\tR\x06status\x12\x1c\n" +
	"\tstartTime\x18\x04 \x01(\x03R\tstartTime\x12\x1c\n" +
	"\tmeetingID\x18\x05 \x01(\tR\tmeetingID\"\xfd\x01\n" +
	"\x19CreatorDefinedMeetingInfo\x12\x14\n" +
	"\x05title\x18\x01 \x01(\tR\x05title\x12$\n" +
	"\rscheduledTime\x18\x02 \x01(\x03R\rscheduledTime\x12(\n" +
	"\x0fmeetingDuration\x18\x03 \x01(\x03R\x0fmeetingDuration\x12\x1a\n" +
	"\bpassword\x18\x04 \x01(\tR\bpassword\x12\x1a\n" +
	"\btimeZone\x18\x05 \x01(\tR\btimeZone\x12\x1e\n" +
	"\n" +
	"hostUserID\x18\x06 \x01(\tR\n" +
	"hostUserID\x12\"\n" +
	"\fcoHostUSerID\x18\a \x03(\tR\fcoHostUSerID\"\xce\x01\n" +
	"\vMeetingInfo\x12Y\n" +
	"\x0fsystemGenerated\x18\x01 \x01(\v2/.openmeeting.meeting.SystemGeneratedMeetingInfoR\x0fsystemGenerated\x12d\n" +
	"\x15creatorDefinedMeeting\x18\x02 \x01(\v2..openmeeting.meeting.CreatorDefinedMeetingInfoR\x15creatorDefinedMeeting\"\xf3\x01\n" +
	"\x11MeetingRepeatInfo\x12\x18\n" +
	"\aendDate\x18\x01 \x01(\x03R\aendDate\x12 \n" +
	"\vrepeatTimes\x18\x02 \x01(\x05R\vrepeatTimes\x12\x1e\n" +
	"\n" +
	"repeatType\x18\x03 \x01(\tR\n" +
	"repeatType\x12\x1a\n" +
	"\buintType\x18\x04 \x01(\tR\buintType\x12\x1a\n" +
	"\binterval\x18\x05 \x01(\x05R\binterval\x12J\n" +
	"\x10repeatDaysOfWeek\x18\x06 \x03(\x0e2\x1e.openmeeting.meeting.DayOfWeekR\x10repeatDaysOfWeek\"\x8a\x04\n" +
	"\x0eMeetingSetting\x12@\n" +
	"\x1bcanParticipantsEnableCamera\x18\x01 \x01(\bR\x1bcanParticipantsEnableCamera\x12H\n" +
	"\x1fcanParticipantsUnmuteMicrophone\x18\x02 \x01(\bR\x1fcanParticipantsUnmuteMicrophone\x12>\n" +
	"\x1acanParticipantsShareScreen\x18\x03 \x01(\bR\x1acanParticipantsShareScreen\x120\n" +
	"\x13disableCameraOnJoin\x18\x04 \x01(\bR\x13disableCameraOnJoin\x128\n" +
	"\x17disableMicrophoneOnJoin\x18\x05 \x01(\bR\x17disableMicrophoneOnJoin\x12F\n" +
	"\x1ecanParticipantJoinMeetingEarly\x18\x06 \x01(\bR\x1ecanParticipantJoinMeetingEarly\x12 \n" +
	"\vlockMeeting\x18\a \x01(\bR\vlockMeeting\x12.\n" +
	"\x12audioEncouragement\x18\b \x01(\bR\x12audioEncouragement\x12&\n" +
	"\x0evideoMirroring\x18\t \x01(\bR\x0evideoMirroring\"\xd1\x01\n" +
	"\x12MeetingInfoSetting\x124\n" +
	"\x04info\x18\x01 \x01(\v2 .openmeeting.meeting.MeetingInfoR\x04info\x12=\n" +
	"\asetting\x18\x02 \x01(\v2#.openmeeting.meeting.MeetingSettingR\asetting\x12F\n" +
	"\n" +
	"repeatInfo\x18\x03 \x01(\v2&.openmeeting.meeting.MeetingRepeatInfoR\n" +
	"repeatInfo\"r\n" +
	"\bUserInfo\x12\x16\n" +
	"\x06userID\x18\x01 \x01(\tR\x06userID\x12\x1a\n" +
	"\bnickname\x18\x02 \x01(\tR\bnickname\x12\x18\n" +
	"\aaccount\x18\x03 \x01(\tR\aaccount\x12\x18\n" +
	"\afaceURL\x18\x04 \x01(\tR\afaceURL\"P\n" +
	"\x13ParticipantMetaData\x129\n" +
	"\buserInfo\x18\x01 \x01(\v2\x1d.openmeeting.meeting.UserInfoR\buserInfo\"\xab\x02\n" +
	"\x0eBookMeetingReq\x12$\n" +
	"\rcreatorUserID\x18\x01 \x01(\tR\rcreatorUserID\x12l\n" +
	"\x19creatorDefinedMeetingInfo\x18\x02 \x01(\v2..openmeeting.meeting.CreatorDefinedMeetingInfoR\x19creatorDefinedMeetingInfo\x12=\n" +
	"\asetting\x18\x03 \x01(\v2#.openmeeting.meeting.MeetingSettingR\asetting\x12F\n" +
	"\n" +
	"repeatInfo\x18\x04 \x01(\v2&.openmeeting.meeting.MeetingRepeatInfoR\n" +
	"repeatInfo\"R\n" +
	"\x0fBookMeetingResp\x12?\n" +
	"\x06detail\x18\x01 \x01(\v2'.openmeeting.meeting.MeetingInfoSettingR\x06detail\"\xee\x01\n" +
	"\x19CreateImmediateMeetingReq\x12$\n" +
	"\rcreatorUserID\x18\x01 \x01(\tR\rcreatorUserID\x12l\n" +
	"\x19creatorDefinedMeetingInfo\x18\x02 \x01(\v2..openmeeting.meeting.CreatorDefinedMeetingInfoR\x19creatorDefinedMeetingInfo\x12=\n" +
	"\asetting\x18\x03 \x01(\v2#.openmeeting.meeting.MeetingSettingR\asetting\"\x95\x01\n" +
	"\x1aCreateImmediateMeetingResp\x12?\n" +
	"\x06detail\x18\x01 \x01(\v2'.openmeeting.meeting.MeetingInfoSettingR\x06detail\x126\n" +
	"\aliveKit\x18\x02 \x01(\v2\x1c.openmeeting.meeting.LiveKitR\aliveKit\"b\n" +
	"\x0eJoinMeetingReq\x12\x1c\n" +
	"\tmeetingID\x18\x01 \x01(\tR\tmeetingID\x12\x16\n" +
	"\x06userID\x18\x02 \x01(\tR\x06userID\x12\x1a\n" +
	"\bpassword\x18\x03 \x01(\tR\bpassword\"I\n" +
	"\x0fJoinMeetingResp\x126\n" +
	"\aliveKit\x18\x01 \x01(\v2\x1c.openmeeting.meeting.LiveKitR\aliveKit\"J\n" +
	"\x12GetMeetingTokenReq\x12\x1c\n" +
	"\tmeetingID\x18\x01 \x01(\tR\tmeetingID\x12\x16\n" +
	"\x06userID\x18\x02 \x01(\tR\x06userID\"k\n" +
	"\x13GetMeetingTokenResp\x12\x1c\n" +
	"\tmeetingID\x18\x01 \x01(\tR\tmeetingID\x126\n" +
	"\aliveKit\x18\x02 \x01(\v2\x1c.openmeeting.meeting.LiveKitR\aliveKit\"G\n" +
	"\x0fLeaveMeetingReq\x12\x1c\n" +
	"\tmeetingID\x18\x01 \x01(\tR\tmeetingID\x12\x16\n" +
	"\x06userID\x18\x02 \x01(\tR\x06userID\"\x12\n" +
	"\x10LeaveMeetingResp\"\x84\x01\n" +
	"\rEndMeetingReq\x12\x1c\n" +
	"\tmeetingID\x18\x01 \x01(\tR\tmeetingID\x12\x16\n" +
	"\x06userID\x18\x02 \x01(\tR\x06userID\x12=\n" +
	"\aendType\x18\x03 \x01(\x0e2#.openmeeting.meeting.MeetingEndTypeR\aendType\"\x10\n" +
	"\x0eEndMeetingResp\"@\n" +
	"\x0eGetMeetingsReq\x12\x16\n" +
	"\x06userID\x18\x01 \x01(\tR\x06userID\x12\x16\n" +
	"\x06status\x18\x02 \x03(\tR\x06status\"b\n" +
	"\x0fGetMeetingsResp\x12O\n" +
	"\x0emeetingDetails\x18\x01 \x03(\v2'.openmeeting.meeting.MeetingInfoSettingR\x0emeetingDetails\"E\n" +
	"\rGetMeetingReq\x12\x16\n" +
	"\x06userID\x18\x01 \x01(\tR\x06userID\x12\x1c\n" +
	"\tmeetingID\x18\x02 \x01(\tR\tmeetingID\"_\n" +
	"\x0eGetMeetingResp\x12M\n" +
	"\rmeetingDetail\x18\x01 \x01(\v2'.openmeeting.meeting.MeetingInfoSettingR\rmeetingDetail\"\xa5\x01\n" +
	"#ModifyMeetingParticipantNickNameReq\x12\x1c\n" +
	"\tmeetingID\x18\x01 \x01(\tR\tmeetingID\x12\x16\n" +
	"\x06userID\x18\x02 \x01(\tR\x06userID\x12,\n" +
	"\x11participantUserID\x18\x03 \x01(\tR\x11participantUserID\x12\x1a\n" +
	"\bnickname\x18\x04 \x01(\tR\bnickname\"&\n" +
	"$ModifyMeetingParticipantNickNameResp\"\xa2\t\n" +
	"\x14UpdateMeetingRequest\x12\x1c\n" +
	"\tmeetingID\x18\x01 \x01(\tR\tmeetingID\x12&\n" +
	"\x0eupdatingUserID\x18\x02 \x01(\tR\x0eupdatingUserID\x12/\n" +
	"\x05title\x18\x03 \x01(\v2\x19.eos.protobuf.StringValueR\x05title\x12>\n" +
	"\rscheduledTime\x18\x04 \x01(\v2\x18.eos.protobuf.Int64ValueR\rscheduledTime\x12B\n" +
	"\x0fmeetingDuration\x18\x05 \x01(\v2\x18.eos.protobuf.Int64ValueR\x0fmeetingDuration\x125\n" +
	"\bpassword\x18\x06 \x01(\v2\x19.eos.protobuf.StringValueR\bpassword\x125\n" +
	"\btimeZone\x18\a \x01(\v2\x19.eos.protobuf.StringValueR\btimeZone\x12F\n" +
	"\n" +
	"repeatInfo\x18\b \x01(\v2&.openmeeting.meeting.MeetingRepeatInfoR\n" +
	"repeatInfo\x12Y\n" +
	"\x1bcanParticipantsEnableCamera\x18\t \x01(\v2\x17.eos.protobuf.BoolValueR\x1bcanParticipantsEnableCamera\x12a\n" +
	"\x1fcanParticipantsUnmuteMicrophone\x18\n" +
	" \x01(\v2\x17.eos.protobuf.BoolValueR\x1fcanParticipantsUnmuteMicrophone\x12W\n" +
	"\x1acanParticipantsShareScreen\x18\v \x01(\v2\x17.eos.protobuf.BoolValueR\x1acanParticipantsShareScreen\x12I\n" +
	"\x13disableCameraOnJoin\x18\f \x01(\v2\x17.eos.protobuf.BoolValueR\x13disableCameraOnJoin\x12Q\n" +
	"\x17disableMicrophoneOnJoin\x18\r \x01(\v2\x17.eos.protobuf.BoolValueR\x17disableMicrophoneOnJoin\x12_\n" +
	"\x1ecanParticipantJoinMeetingEarly\x18\x0e \x01(\v2\x17.eos.protobuf.BoolValueR\x1ecanParticipantJoinMeetingEarly\x129\n" +
	"\vlockMeeting\x18\x0f \x01(\v2\x17.eos.protobuf.BoolValueR\vlockMeeting\x12G\n" +
	"\x12audioEncouragement\x18\x10 \x01(\v2\x17.eos.protobuf.BoolValueR\x12audioEncouragement\x12?\n" +
	"\x0evideoMirroring\x18\x11 \x01(\v2\x17.eos.protobuf.BoolValueR\x0evideoMirroring\"\x13\n" +
	"\x11UpdateMeetingResp\"l\n" +
	"\x16PersonalMeetingSetting\x12$\n" +
	"\rcameraOnEntry\x18\x01 \x01(\bR\rcameraOnEntry\x12,\n" +
	"\x11microphoneOnEntry\x18\x02 \x01(\bR\x11microphoneOnEntry\"U\n" +
	"\x1dGetPersonalMeetingSettingsReq\x12\x1c\n" +
	"\tmeetingID\x18\x01 \x01(\tR\tmeetingID\x12\x16\n" +
	"\x06userID\x18\x02 \x01(\tR\x06userID\"g\n" +
	"\x1eGetPersonalMeetingSettingsResp\x12E\n" +
	"\asetting\x18\x01 \x01(\v2+.openmeeting.meeting.PersonalMeetingSettingR\asetting\"\xdb\x01\n" +
	"\x1dSetPersonalMeetingSettingsReq\x12\x1c\n" +
	"\tmeetingID\x18\x01 \x01(\tR\tmeetingID\x12\x16\n" +
	"\x06userID\x18\x02 \x01(\tR\x06userID\x12=\n" +
	"\rcameraOnEntry\x18\x03 \x01(\v2\x17.eos.protobuf.BoolValueR\rcameraOnEntry\x12E\n" +
	"\x11microphoneOnEntry\x18\x04 \x01(\v2\x17.eos.protobuf.BoolValueR\x11microphoneOnEntry\" \n" +
	"\x1eSetPersonalMeetingSettingsResp\"\xce\x01\n" +
	"\fPersonalData\x12\x16\n" +
	"\x06userID\x18\x01 \x01(\tR\x06userID\x12U\n" +
	"\x0fpersonalSetting\x18\x02 \x01(\v2+.openmeeting.meeting.PersonalMeetingSettingR\x0fpersonalSetting\x12O\n" +
	"\flimitSetting\x18\x03 \x01(\v2+.openmeeting.meeting.PersonalMeetingSettingR\flimitSetting\"\x99\x01\n" +
	"\x0fMeetingMetadata\x12?\n" +
	"\x06detail\x18\x01 \x01(\v2'.openmeeting.meeting.MeetingInfoSettingR\x06detail\x12E\n" +
	"\fpersonalData\x18\x02 \x03(\v2!.openmeeting.meeting.PersonalDataR\fpersonalData\"\xe5\x01\n" +
	"\x17OperateRoomAllStreamReq\x12\x1c\n" +
	"\tmeetingID\x18\x01 \x01(\tR\tmeetingID\x12&\n" +
	"\x0eoperatorUserID\x18\x02 \x01(\tR\x0eoperatorUserID\x12=\n" +
	"\rcameraOnEntry\x18\x03 \x01(\v2\x17.eos.protobuf.BoolValueR\rcameraOnEntry\x12E\n" +
	"\x11microphoneOnEntry\x18\x04 \x01(\v2\x17.eos.protobuf.BoolValueR\x11microphoneOnEntry\"\x82\x01\n" +
	"\x18OperateRoomAllStreamResp\x12:\n" +
	"\x18streamNotExistUserIDList\x18\x01 \x03(\tR\x18streamNotExistUserIDList\x12*\n" +
	"\x10failedUserIDList\x18\x02 \x03(\tR\x10failedUserIDList\"\x84\x01\n" +
	"\x1cRemoveMeetingParticipantsReq\x12\x1c\n" +
	"\tmeetingID\x18\x01 \x01(\tR\tmeetingID\x12\x16\n" +
	"\x06userID\x18\x02 \x01(\tR\x06userID\x12.\n" +
	"\x12participantUserIDs\x18\x03 \x03(\tR\x12participantUserIDs\"y\n" +
	"\x1dRemoveMeetingParticipantsResp\x12,\n" +
	"\x11successUserIDList\x18\x01 \x03(\tR\x11successUserIDList\x12*\n" +
	"\x10failedUserIDList\x18\x02 \x03(\tR\x10failedUserIDList\"\xae\x01\n" +
	"\x15SetMeetingHostInfoReq\x12\x1c\n" +
	"\tmeetingID\x18\x01 \x01(\tR\tmeetingID\x12\x16\n" +
	"\x06userID\x18\x02 \x01(\tR\x06userID\x129\n" +
	"\n" +
	"hostUserID\x18\x03 \x01(\v2\x19.eos.protobuf.StringValueR\n" +
	"hostUserID\x12$\n" +
	"\rcoHostUserIDs\x18\x04 \x03(\tR\rcoHostUserIDs\"\x18\n" +
	"\x16SetMeetingHostInfoResp\"\xcf\x02\n" +
	"\x11NotifyMeetingData\x12&\n" +
	"\x0eoperatorUserID\x18\x01 \x01(\tR\x0eoperatorUserID\x12V\n" +
	"\x11streamOperateData\x18\x02 \x01(\v2&.openmeeting.meeting.StreamOperateDataH\x00R\x11streamOperateData\x12P\n" +
	"\x0fmeetingHostData\x18\x03 \x01(\v2$.openmeeting.meeting.MeetingHostDataH\x00R\x0fmeetingHostData\x12Y\n" +
	"\x12kickOffMeetingData\x18\x04 \x01(\v2'.openmeeting.meeting.KickOffMeetingDataH\x00R\x12kickOffMeetingDataB\r\n" +
	"\vmessageType\"\xa4\x01\n" +
	"\x12KickOffMeetingData\x12\x16\n" +
	"\x06userID\x18\x01 \x01(\tR\x06userID\x12\x1a\n" +
	"\bnickname\x18\x02 \x01(\tR\bnickname\x12B\n" +
	"\n" +
	"reasonCode\x18\x03 \x01(\x0e2\".openmeeting.meeting.KickOffReasonR\n" +
	"reasonCode\x12\x16\n" +
	"\x06reason\x18\x04 \x01(\tR\x06reason\"Y\n" +
	"\x11StreamOperateData\x12D\n" +
	"\toperation\x18\x01 \x03(\v2&.openmeeting.meeting.UserOperationDataR\toperation\"\xb1\x01\n" +
	"\x11UserOperationData\x12\x16\n" +
	"\x06userID\x18\x01 \x01(\tR\x06userID\x12=\n" +
	"\rcameraOnEntry\x18\x02 \x01(\v2\x17.eos.protobuf.BoolValueR\rcameraOnEntry\x12E\n" +
	"\x11microphoneOnEntry\x18\x03 \x01(\v2\x17.eos.protobuf.BoolValueR\x11microphoneOnEntry\"q\n" +
	"\x0fMeetingHostData\x12*\n" +
	"\x10operatorNickname\x18\x02 \x01(\tR\x10operatorNickname\x12\x16\n" +
	"\x06userID\x18\x03 \x01(\tR\x06userID\x12\x1a\n" +
	"\bhostType\x18\x04 \x01(\tR\bhostType\"j\n" +
	"\x18CleanPreviousMeetingsReq\x12\x16\n" +
	"\x06userID\x18\x01 \x01(\tR\x06userID\x12\x1e\n" +
	"\n" +
	"reasonCode\x18\x02 \x01(\x05R\n" +
	"reasonCode\x12\x16\n" +
	"\x06reason\x18\x03 \x01(\tR\x06reason\"\x1b\n" +
	"\x19CleanPreviousMeetingsResp\"r\n" +
	"\x16ToggleRecordMeetingReq\x12\x1c\n" +
	"\tmeetingID\x18\x01 \x01(\tR\tmeetingID\x12\x16\n" +
	"\x06userID\x18\x02 \x01(\tR\x06userID\x12\"\n" +
	"\fenableRecord\x18\x03 \x01(\bR\fenableRecord\"\x19\n" +
	"\x17ToggleRecordMeetingResp*g\n" +
	"\tDayOfWeek\x12\n" +
	"\n" +
	"\x06SUNDAY\x10\x00\x12\n" +
	"\n" +
	"\x06MONDAY\x10\x01\x12\v\n" +
	"\aTUESDAY\x10\x02\x12\r\n" +
	"\tWEDNESDAY\x10\x03\x12\f\n" +
	"\bTHURSDAY\x10\x04\x12\n" +
	"\n" +
	"\x06FRIDAY\x10\x05\x12\f\n" +
	"\bSATURDAY\x10\x06*=\n" +
	"\rKickOffReason\x12\x13\n" +
	"\x0fDuplicatedLogin\x10\x00\x12\v\n" +
	"\aOffline\x10\x01\x12\n" +
	"\n" +
	"\x06Logout\x10\x02*-\n" +
	"\x0eMeetingEndType\x12\x0e\n" +
	"\n" +
	"CancelType\x10\x00\x12\v\n" +
	"\aEndType\x10\x012\xe3\x0e\n" +
	"\x0eMeetingService\x12X\n" +
	"\vBookMeeting\x12#.openmeeting.meeting.BookMeetingReq\x1a$.openmeeting.meeting.BookMeetingResp\x12y\n" +
	"\x16CreateImmediateMeeting\x12..openmeeting.meeting.CreateImmediateMeetingReq\x1a/.openmeeting.meeting.CreateImmediateMeetingResp\x12X\n" +
	"\vJoinMeeting\x12#.openmeeting.meeting.JoinMeetingReq\x1a$.openmeeting.meeting.JoinMeetingResp\x12d\n" +
	"\x0fGetMeetingToken\x12'.openmeeting.meeting.GetMeetingTokenReq\x1a(.openmeeting.meeting.GetMeetingTokenResp\x12[\n" +
	"\fLeaveMeeting\x12$.openmeeting.meeting.LeaveMeetingReq\x1a%.openmeeting.meeting.LeaveMeetingResp\x12U\n" +
	"\n" +
	"EndMeeting\x12\".openmeeting.meeting.EndMeetingReq\x1a#.openmeeting.meeting.EndMeetingResp\x12X\n" +
	"\vGetMeetings\x12#.openmeeting.meeting.GetMeetingsReq\x1a$.openmeeting.meeting.GetMeetingsResp\x12U\n" +
	"\n" +
	"GetMeeting\x12\".openmeeting.meeting.GetMeetingReq\x1a#.openmeeting.meeting.GetMeetingResp\x12b\n" +
	"\rUpdateMeeting\x12).openmeeting.meeting.UpdateMeetingRequest\x1a&.openmeeting.meeting.UpdateMeetingResp\x12\x85\x01\n" +
	"\x1aGetPersonalMeetingSettings\x122.openmeeting.meeting.GetPersonalMeetingSettingsReq\x1a3.openmeeting.meeting.GetPersonalMeetingSettingsResp\x12\x85\x01\n" +
	"\x1aSetPersonalMeetingSettings\x122.openmeeting.meeting.SetPersonalMeetingSettingsReq\x1a3.openmeeting.meeting.SetPersonalMeetingSettingsResp\x12s\n" +
	"\x14OperateRoomAllStream\x12,.openmeeting.meeting.OperateRoomAllStreamReq\x1a-.openmeeting.meeting.OperateRoomAllStreamResp\x12\x97\x01\n" +
	" ModifyMeetingParticipantNickName\x128.openmeeting.meeting.ModifyMeetingParticipantNickNameReq\x1a9.openmeeting.meeting.ModifyMeetingParticipantNickNameResp\x12{\n" +
	"\x12RemoveParticipants\x121.openmeeting.meeting.RemoveMeetingParticipantsReq\x1a2.openmeeting.meeting.RemoveMeetingParticipantsResp\x12m\n" +
	"\x12SetMeetingHostInfo\x12*.openmeeting.meeting.SetMeetingHostInfoReq\x1a+.openmeeting.meeting.SetMeetingHostInfoResp\x12v\n" +
	"\x15CleanPreviousMeetings\x12-.openmeeting.meeting.CleanPreviousMeetingsReq\x1a..openmeeting.meeting.CleanPreviousMeetingsResp\x12p\n" +
	"\x13ToggleRecordMeeting\x12+.openmeeting.meeting.ToggleRecordMeetingReq\x1a,.openmeeting.meeting.ToggleRecordMeetingRespB-Z+github.com/eos/protocol/openmeeting/meetingb\x06proto3"

var (
	file_meeting_proto_rawDescOnce sync.Once
	file_meeting_proto_rawDescData []byte
)

func file_meeting_proto_rawDescGZIP() []byte {
	file_meeting_proto_rawDescOnce.Do(func() {
		file_meeting_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_meeting_proto_rawDesc), len(file_meeting_proto_rawDesc)))
	})
	return file_meeting_proto_rawDescData
}

var file_meeting_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_meeting_proto_msgTypes = make([]protoimpl.MessageInfo, 51)
var file_meeting_proto_goTypes = []any{
	(DayOfWeek)(0),                               // 0: openmeeting.meeting.DayOfWeek
	(KickOffReason)(0),                           // 1: openmeeting.meeting.KickOffReason
	(MeetingEndType)(0),                          // 2: openmeeting.meeting.MeetingEndType
	(*LiveKit)(nil),                              // 3: openmeeting.meeting.LiveKit
	(*SystemGeneratedMeetingInfo)(nil),           // 4: openmeeting.meeting.SystemGeneratedMeetingInfo
	(*CreatorDefinedMeetingInfo)(nil),            // 5: openmeeting.meeting.CreatorDefinedMeetingInfo
	(*MeetingInfo)(nil),                          // 6: openmeeting.meeting.MeetingInfo
	(*MeetingRepeatInfo)(nil),                    // 7: openmeeting.meeting.MeetingRepeatInfo
	(*MeetingSetting)(nil),                       // 8: openmeeting.meeting.MeetingSetting
	(*MeetingInfoSetting)(nil),                   // 9: openmeeting.meeting.MeetingInfoSetting
	(*UserInfo)(nil),                             // 10: openmeeting.meeting.UserInfo
	(*ParticipantMetaData)(nil),                  // 11: openmeeting.meeting.ParticipantMetaData
	(*BookMeetingReq)(nil),                       // 12: openmeeting.meeting.BookMeetingReq
	(*BookMeetingResp)(nil),                      // 13: openmeeting.meeting.BookMeetingResp
	(*CreateImmediateMeetingReq)(nil),            // 14: openmeeting.meeting.CreateImmediateMeetingReq
	(*CreateImmediateMeetingResp)(nil),           // 15: openmeeting.meeting.CreateImmediateMeetingResp
	(*JoinMeetingReq)(nil),                       // 16: openmeeting.meeting.JoinMeetingReq
	(*JoinMeetingResp)(nil),                      // 17: openmeeting.meeting.JoinMeetingResp
	(*GetMeetingTokenReq)(nil),                   // 18: openmeeting.meeting.GetMeetingTokenReq
	(*GetMeetingTokenResp)(nil),                  // 19: openmeeting.meeting.GetMeetingTokenResp
	(*LeaveMeetingReq)(nil),                      // 20: openmeeting.meeting.LeaveMeetingReq
	(*LeaveMeetingResp)(nil),                     // 21: openmeeting.meeting.LeaveMeetingResp
	(*EndMeetingReq)(nil),                        // 22: openmeeting.meeting.EndMeetingReq
	(*EndMeetingResp)(nil),                       // 23: openmeeting.meeting.EndMeetingResp
	(*GetMeetingsReq)(nil),                       // 24: openmeeting.meeting.GetMeetingsReq
	(*GetMeetingsResp)(nil),                      // 25: openmeeting.meeting.GetMeetingsResp
	(*GetMeetingReq)(nil),                        // 26: openmeeting.meeting.GetMeetingReq
	(*GetMeetingResp)(nil),                       // 27: openmeeting.meeting.GetMeetingResp
	(*ModifyMeetingParticipantNickNameReq)(nil),  // 28: openmeeting.meeting.ModifyMeetingParticipantNickNameReq
	(*ModifyMeetingParticipantNickNameResp)(nil), // 29: openmeeting.meeting.ModifyMeetingParticipantNickNameResp
	(*UpdateMeetingRequest)(nil),                 // 30: openmeeting.meeting.UpdateMeetingRequest
	(*UpdateMeetingResp)(nil),                    // 31: openmeeting.meeting.UpdateMeetingResp
	(*PersonalMeetingSetting)(nil),               // 32: openmeeting.meeting.PersonalMeetingSetting
	(*GetPersonalMeetingSettingsReq)(nil),        // 33: openmeeting.meeting.GetPersonalMeetingSettingsReq
	(*GetPersonalMeetingSettingsResp)(nil),       // 34: openmeeting.meeting.GetPersonalMeetingSettingsResp
	(*SetPersonalMeetingSettingsReq)(nil),        // 35: openmeeting.meeting.SetPersonalMeetingSettingsReq
	(*SetPersonalMeetingSettingsResp)(nil),       // 36: openmeeting.meeting.SetPersonalMeetingSettingsResp
	(*PersonalData)(nil),                         // 37: openmeeting.meeting.PersonalData
	(*MeetingMetadata)(nil),                      // 38: openmeeting.meeting.MeetingMetadata
	(*OperateRoomAllStreamReq)(nil),              // 39: openmeeting.meeting.OperateRoomAllStreamReq
	(*OperateRoomAllStreamResp)(nil),             // 40: openmeeting.meeting.OperateRoomAllStreamResp
	(*RemoveMeetingParticipantsReq)(nil),         // 41: openmeeting.meeting.RemoveMeetingParticipantsReq
	(*RemoveMeetingParticipantsResp)(nil),        // 42: openmeeting.meeting.RemoveMeetingParticipantsResp
	(*SetMeetingHostInfoReq)(nil),                // 43: openmeeting.meeting.SetMeetingHostInfoReq
	(*SetMeetingHostInfoResp)(nil),               // 44: openmeeting.meeting.SetMeetingHostInfoResp
	(*NotifyMeetingData)(nil),                    // 45: openmeeting.meeting.NotifyMeetingData
	(*KickOffMeetingData)(nil),                   // 46: openmeeting.meeting.KickOffMeetingData
	(*StreamOperateData)(nil),                    // 47: openmeeting.meeting.StreamOperateData
	(*UserOperationData)(nil),                    // 48: openmeeting.meeting.UserOperationData
	(*MeetingHostData)(nil),                      // 49: openmeeting.meeting.MeetingHostData
	(*CleanPreviousMeetingsReq)(nil),             // 50: openmeeting.meeting.CleanPreviousMeetingsReq
	(*CleanPreviousMeetingsResp)(nil),            // 51: openmeeting.meeting.CleanPreviousMeetingsResp
	(*ToggleRecordMeetingReq)(nil),               // 52: openmeeting.meeting.ToggleRecordMeetingReq
	(*ToggleRecordMeetingResp)(nil),              // 53: openmeeting.meeting.ToggleRecordMeetingResp
	(*wrapperspb.StringValue)(nil),               // 54: eos.protobuf.StringValue
	(*wrapperspb.Int64Value)(nil),                // 55: eos.protobuf.Int64Value
	(*wrapperspb.BoolValue)(nil),                 // 56: eos.protobuf.BoolValue
}
var file_meeting_proto_depIdxs = []int32{
	4,  // 0: openmeeting.meeting.MeetingInfo.systemGenerated:type_name -> openmeeting.meeting.SystemGeneratedMeetingInfo
	5,  // 1: openmeeting.meeting.MeetingInfo.creatorDefinedMeeting:type_name -> openmeeting.meeting.CreatorDefinedMeetingInfo
	0,  // 2: openmeeting.meeting.MeetingRepeatInfo.repeatDaysOfWeek:type_name -> openmeeting.meeting.DayOfWeek
	6,  // 3: openmeeting.meeting.MeetingInfoSetting.info:type_name -> openmeeting.meeting.MeetingInfo
	8,  // 4: openmeeting.meeting.MeetingInfoSetting.setting:type_name -> openmeeting.meeting.MeetingSetting
	7,  // 5: openmeeting.meeting.MeetingInfoSetting.repeatInfo:type_name -> openmeeting.meeting.MeetingRepeatInfo
	10, // 6: openmeeting.meeting.ParticipantMetaData.userInfo:type_name -> openmeeting.meeting.UserInfo
	5,  // 7: openmeeting.meeting.BookMeetingReq.creatorDefinedMeetingInfo:type_name -> openmeeting.meeting.CreatorDefinedMeetingInfo
	8,  // 8: openmeeting.meeting.BookMeetingReq.setting:type_name -> openmeeting.meeting.MeetingSetting
	7,  // 9: openmeeting.meeting.BookMeetingReq.repeatInfo:type_name -> openmeeting.meeting.MeetingRepeatInfo
	9,  // 10: openmeeting.meeting.BookMeetingResp.detail:type_name -> openmeeting.meeting.MeetingInfoSetting
	5,  // 11: openmeeting.meeting.CreateImmediateMeetingReq.creatorDefinedMeetingInfo:type_name -> openmeeting.meeting.CreatorDefinedMeetingInfo
	8,  // 12: openmeeting.meeting.CreateImmediateMeetingReq.setting:type_name -> openmeeting.meeting.MeetingSetting
	9,  // 13: openmeeting.meeting.CreateImmediateMeetingResp.detail:type_name -> openmeeting.meeting.MeetingInfoSetting
	3,  // 14: openmeeting.meeting.CreateImmediateMeetingResp.liveKit:type_name -> openmeeting.meeting.LiveKit
	3,  // 15: openmeeting.meeting.JoinMeetingResp.liveKit:type_name -> openmeeting.meeting.LiveKit
	3,  // 16: openmeeting.meeting.GetMeetingTokenResp.liveKit:type_name -> openmeeting.meeting.LiveKit
	2,  // 17: openmeeting.meeting.EndMeetingReq.endType:type_name -> openmeeting.meeting.MeetingEndType
	9,  // 18: openmeeting.meeting.GetMeetingsResp.meetingDetails:type_name -> openmeeting.meeting.MeetingInfoSetting
	9,  // 19: openmeeting.meeting.GetMeetingResp.meetingDetail:type_name -> openmeeting.meeting.MeetingInfoSetting
	54, // 20: openmeeting.meeting.UpdateMeetingRequest.title:type_name -> eos.protobuf.StringValue
	55, // 21: openmeeting.meeting.UpdateMeetingRequest.scheduledTime:type_name -> eos.protobuf.Int64Value
	55, // 22: openmeeting.meeting.UpdateMeetingRequest.meetingDuration:type_name -> eos.protobuf.Int64Value
	54, // 23: openmeeting.meeting.UpdateMeetingRequest.password:type_name -> eos.protobuf.StringValue
	54, // 24: openmeeting.meeting.UpdateMeetingRequest.timeZone:type_name -> eos.protobuf.StringValue
	7,  // 25: openmeeting.meeting.UpdateMeetingRequest.repeatInfo:type_name -> openmeeting.meeting.MeetingRepeatInfo
	56, // 26: openmeeting.meeting.UpdateMeetingRequest.canParticipantsEnableCamera:type_name -> eos.protobuf.BoolValue
	56, // 27: openmeeting.meeting.UpdateMeetingRequest.canParticipantsUnmuteMicrophone:type_name -> eos.protobuf.BoolValue
	56, // 28: openmeeting.meeting.UpdateMeetingRequest.canParticipantsShareScreen:type_name -> eos.protobuf.BoolValue
	56, // 29: openmeeting.meeting.UpdateMeetingRequest.disableCameraOnJoin:type_name -> eos.protobuf.BoolValue
	56, // 30: openmeeting.meeting.UpdateMeetingRequest.disableMicrophoneOnJoin:type_name -> eos.protobuf.BoolValue
	56, // 31: openmeeting.meeting.UpdateMeetingRequest.canParticipantJoinMeetingEarly:type_name -> eos.protobuf.BoolValue
	56, // 32: openmeeting.meeting.UpdateMeetingRequest.lockMeeting:type_name -> eos.protobuf.BoolValue
	56, // 33: openmeeting.meeting.UpdateMeetingRequest.audioEncouragement:type_name -> eos.protobuf.BoolValue
	56, // 34: openmeeting.meeting.UpdateMeetingRequest.videoMirroring:type_name -> eos.protobuf.BoolValue
	32, // 35: openmeeting.meeting.GetPersonalMeetingSettingsResp.setting:type_name -> openmeeting.meeting.PersonalMeetingSetting
	56, // 36: openmeeting.meeting.SetPersonalMeetingSettingsReq.cameraOnEntry:type_name -> eos.protobuf.BoolValue
	56, // 37: openmeeting.meeting.SetPersonalMeetingSettingsReq.microphoneOnEntry:type_name -> eos.protobuf.BoolValue
	32, // 38: openmeeting.meeting.PersonalData.personalSetting:type_name -> openmeeting.meeting.PersonalMeetingSetting
	32, // 39: openmeeting.meeting.PersonalData.limitSetting:type_name -> openmeeting.meeting.PersonalMeetingSetting
	9,  // 40: openmeeting.meeting.MeetingMetadata.detail:type_name -> openmeeting.meeting.MeetingInfoSetting
	37, // 41: openmeeting.meeting.MeetingMetadata.personalData:type_name -> openmeeting.meeting.PersonalData
	56, // 42: openmeeting.meeting.OperateRoomAllStreamReq.cameraOnEntry:type_name -> eos.protobuf.BoolValue
	56, // 43: openmeeting.meeting.OperateRoomAllStreamReq.microphoneOnEntry:type_name -> eos.protobuf.BoolValue
	54, // 44: openmeeting.meeting.SetMeetingHostInfoReq.hostUserID:type_name -> eos.protobuf.StringValue
	47, // 45: openmeeting.meeting.NotifyMeetingData.streamOperateData:type_name -> openmeeting.meeting.StreamOperateData
	49, // 46: openmeeting.meeting.NotifyMeetingData.meetingHostData:type_name -> openmeeting.meeting.MeetingHostData
	46, // 47: openmeeting.meeting.NotifyMeetingData.kickOffMeetingData:type_name -> openmeeting.meeting.KickOffMeetingData
	1,  // 48: openmeeting.meeting.KickOffMeetingData.reasonCode:type_name -> openmeeting.meeting.KickOffReason
	48, // 49: openmeeting.meeting.StreamOperateData.operation:type_name -> openmeeting.meeting.UserOperationData
	56, // 50: openmeeting.meeting.UserOperationData.cameraOnEntry:type_name -> eos.protobuf.BoolValue
	56, // 51: openmeeting.meeting.UserOperationData.microphoneOnEntry:type_name -> eos.protobuf.BoolValue
	12, // 52: openmeeting.meeting.MeetingService.BookMeeting:input_type -> openmeeting.meeting.BookMeetingReq
	14, // 53: openmeeting.meeting.MeetingService.CreateImmediateMeeting:input_type -> openmeeting.meeting.CreateImmediateMeetingReq
	16, // 54: openmeeting.meeting.MeetingService.JoinMeeting:input_type -> openmeeting.meeting.JoinMeetingReq
	18, // 55: openmeeting.meeting.MeetingService.GetMeetingToken:input_type -> openmeeting.meeting.GetMeetingTokenReq
	20, // 56: openmeeting.meeting.MeetingService.LeaveMeeting:input_type -> openmeeting.meeting.LeaveMeetingReq
	22, // 57: openmeeting.meeting.MeetingService.EndMeeting:input_type -> openmeeting.meeting.EndMeetingReq
	24, // 58: openmeeting.meeting.MeetingService.GetMeetings:input_type -> openmeeting.meeting.GetMeetingsReq
	26, // 59: openmeeting.meeting.MeetingService.GetMeeting:input_type -> openmeeting.meeting.GetMeetingReq
	30, // 60: openmeeting.meeting.MeetingService.UpdateMeeting:input_type -> openmeeting.meeting.UpdateMeetingRequest
	33, // 61: openmeeting.meeting.MeetingService.GetPersonalMeetingSettings:input_type -> openmeeting.meeting.GetPersonalMeetingSettingsReq
	35, // 62: openmeeting.meeting.MeetingService.SetPersonalMeetingSettings:input_type -> openmeeting.meeting.SetPersonalMeetingSettingsReq
	39, // 63: openmeeting.meeting.MeetingService.OperateRoomAllStream:input_type -> openmeeting.meeting.OperateRoomAllStreamReq
	28, // 64: openmeeting.meeting.MeetingService.ModifyMeetingParticipantNickName:input_type -> openmeeting.meeting.ModifyMeetingParticipantNickNameReq
	41, // 65: openmeeting.meeting.MeetingService.RemoveParticipants:input_type -> openmeeting.meeting.RemoveMeetingParticipantsReq
	43, // 66: openmeeting.meeting.MeetingService.SetMeetingHostInfo:input_type -> openmeeting.meeting.SetMeetingHostInfoReq
	50, // 67: openmeeting.meeting.MeetingService.CleanPreviousMeetings:input_type -> openmeeting.meeting.CleanPreviousMeetingsReq
	52, // 68: openmeeting.meeting.MeetingService.ToggleRecordMeeting:input_type -> openmeeting.meeting.ToggleRecordMeetingReq
	13, // 69: openmeeting.meeting.MeetingService.BookMeeting:output_type -> openmeeting.meeting.BookMeetingResp
	15, // 70: openmeeting.meeting.MeetingService.CreateImmediateMeeting:output_type -> openmeeting.meeting.CreateImmediateMeetingResp
	17, // 71: openmeeting.meeting.MeetingService.JoinMeeting:output_type -> openmeeting.meeting.JoinMeetingResp
	19, // 72: openmeeting.meeting.MeetingService.GetMeetingToken:output_type -> openmeeting.meeting.GetMeetingTokenResp
	21, // 73: openmeeting.meeting.MeetingService.LeaveMeeting:output_type -> openmeeting.meeting.LeaveMeetingResp
	23, // 74: openmeeting.meeting.MeetingService.EndMeeting:output_type -> openmeeting.meeting.EndMeetingResp
	25, // 75: openmeeting.meeting.MeetingService.GetMeetings:output_type -> openmeeting.meeting.GetMeetingsResp
	27, // 76: openmeeting.meeting.MeetingService.GetMeeting:output_type -> openmeeting.meeting.GetMeetingResp
	31, // 77: openmeeting.meeting.MeetingService.UpdateMeeting:output_type -> openmeeting.meeting.UpdateMeetingResp
	34, // 78: openmeeting.meeting.MeetingService.GetPersonalMeetingSettings:output_type -> openmeeting.meeting.GetPersonalMeetingSettingsResp
	36, // 79: openmeeting.meeting.MeetingService.SetPersonalMeetingSettings:output_type -> openmeeting.meeting.SetPersonalMeetingSettingsResp
	40, // 80: openmeeting.meeting.MeetingService.OperateRoomAllStream:output_type -> openmeeting.meeting.OperateRoomAllStreamResp
	29, // 81: openmeeting.meeting.MeetingService.ModifyMeetingParticipantNickName:output_type -> openmeeting.meeting.ModifyMeetingParticipantNickNameResp
	42, // 82: openmeeting.meeting.MeetingService.RemoveParticipants:output_type -> openmeeting.meeting.RemoveMeetingParticipantsResp
	44, // 83: openmeeting.meeting.MeetingService.SetMeetingHostInfo:output_type -> openmeeting.meeting.SetMeetingHostInfoResp
	51, // 84: openmeeting.meeting.MeetingService.CleanPreviousMeetings:output_type -> openmeeting.meeting.CleanPreviousMeetingsResp
	53, // 85: openmeeting.meeting.MeetingService.ToggleRecordMeeting:output_type -> openmeeting.meeting.ToggleRecordMeetingResp
	69, // [69:86] is the sub-list for method output_type
	52, // [52:69] is the sub-list for method input_type
	52, // [52:52] is the sub-list for extension type_name
	52, // [52:52] is the sub-list for extension extendee
	0,  // [0:52] is the sub-list for field type_name
}

func init() { file_meeting_proto_init() }
func file_meeting_proto_init() {
	if File_meeting_proto != nil {
		return
	}
	file_meeting_proto_msgTypes[42].OneofWrappers = []any{
		(*NotifyMeetingData_StreamOperateData)(nil),
		(*NotifyMeetingData_MeetingHostData)(nil),
		(*NotifyMeetingData_KickOffMeetingData)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_meeting_proto_rawDesc), len(file_meeting_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   51,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_meeting_proto_goTypes,
		DependencyIndexes: file_meeting_proto_depIdxs,
		EnumInfos:         file_meeting_proto_enumTypes,
		MessageInfos:      file_meeting_proto_msgTypes,
	}.Build()
	File_meeting_proto = out.File
	file_meeting_proto_goTypes = nil
	file_meeting_proto_depIdxs = nil
}
